{"older_articles":[{"layout":"post","title":"相对定位","date":"2014-05-08","categories":"js","tag":"学习总结","desc":"\"获取某个DOM元素相对与另一个DOM元素的位置; `offsetLeft, offsetTop, clientHeight, clientWidth, offsetParent`\"","imgUrl":"data/post_thumb/position.png","filename":"2014-05-08-相对定位.md","content":"\n\n相对定位\n======================\n\n获取某个DOM元素相对与另一个DOM元素的位置; `offsetLeft, offsetTop, clientHeight, clientWidth, offsetParent`\n\n![八个方向](./data/position.png)\n\n部分代码\n======================\n\n```js\nvar getPosition = function(dom, subject, mode){\n\tsubject = subject.get(0);\n\tvar position = {};\n\n\tvar left = mode.match('left') ? subject.offsetLeft : subject.offsetLeft + subject.offsetWidth;\n\tvar top = mode.match('top') ?  subject.offsetTop : subject.offsetTop + subject.offsetHeight;\n\tvar current = subject.offsetParent;\n\n\t// 不断与父容器 (offsetParent对象) 累加 offsetTop,offsetLeft\n\twhile (current !== null && current !== document.body){\n\t\tleft += current.offsetLeft;\n\t\ttop += current.offsetTop;\n\t\tcurrent = current.offsetParent;\n\t}\n\tvar m = mode.split(',');\n\tposition.left = (m[0].match('left') || m[1].match('right')) ? left-dom.outerWidth() : left;\n\tposition.top = (m[0].match('top') || m[1].match('bottom')) ? top-dom.outerHeight() : top;\n\n\treturn position;\n}\n```\n\n参数说明\n======================\n\n1. 当前要定位的容器；\n2. 参照物容器；\n3. 可选类型：\n\t- 'left,top'\n\t- 'left,bottom'\n\t- 'right,top'\n\t- 'right,bottom'\n\t- 'top,left'\n\t- 'top,right'\n\t- 'bottom,left'\n\t- 'bottom,right'\n\n#### [在线 Demo](./demos/position.html)\n\n\n\n\n","id":0},{"layout":"post","title":"调研- 同类JS单元测试框架","date":"2014-06-23","categories":"Note","tag":"\"总结\"","desc":"\"同类JS单元测试框架：Qunit, Jasmine, Mocha, Sinon, JSTestDriver（不更新）, Karma(Testacular), busterjs, Testem, TestSwarm, YUI Yeti\"","imgUrl":"data/post_thumb/unit-test-comic.png","filename":"2014-06-23-调研- 同类JS单元测试框架.md","content":"\n\n调研- 同类JS单元测试框架\n===================================\n\n### 一，测试框架\n\n#### Qunit\n- jquery团队, John Resig开发；简单美观，容易上手；\n- 不能自动化浏览器测试\n\n#### Jasmine\n- BDD；基于Ruby.\n- 和JsUnit( 已没更新）是同一群人写的;\n- 大小：20K左右\n- 使用： 淘宝UED\n- 插件：jasmine-jQuery\n- 对于Ruby语言有特别的支持\n\n#### Mocha\n- TJ大神。基于nodeJS\n- 自由和geek；TDD,BDD可选；在bash端有特别亮点，如diff之类\n- Chai  -BDD/TDD断言库\n\n#### Sinon\n- 由《Test-Driven JavaScript Development》一书的作者Christian Johansen开发。\n- 为Javascript提供独立的spies，stubs和mocks。\n- 更多的是作为一个辅助的测试工具集，可以跟Jasmine、Mocha、QUnit等任意测试框架结合使用\n\n\n### 二，测试工具\n\n不是JS测试框架，而是一个测试框架的驱动器（测试执行过程管理工具）测试所有主流 Web 浏览器， 自动化完成单元测试\n\n#### JSTestDriver（不更新）\n- 来自Google，基于JAVA编写。TDD。\n- 安装使用稍微有点麻烦，依赖于JAVA环境。\n- \"通过使用功能强大的 JSTestDriver (JSTD) 工具，您能够在多个浏览器中从命令行运行 JavaScript。JSTD 带有一个 JAR 文件，它可以让您启动服务器、捕获一或多个浏览器并在这些浏览器中运行测试。\"\n\n#### Karma(Testacular)\n- 来自 Google AngularJs团队，基于nodeJS，使用了socketio。类似JSTD\n- 支持自动化测试；支持多个Javascript测试框架；支持同时多浏览器，多终端测试\n- 支持PhantomJS无界面浏览器\n- 不支持nodejs测试\n- 不支持历史结果查询\n- webstorm对它有特别支持\n\n#### busterjs\n- 作者之一就是Christian Johansen； 基于nodeJS；\n- 支持自动化测试；支持多个Javascript测试框架；支持同时多浏览器，多终端测试\n- 内建SinonJS\n- 支持nodejs测试\n- 可以在普通浏览器或无界面浏览器PhantomJS(soon)中运行\n- 不支持历史结果查询\n- 挺受瞩目的，但目前仍是beta版本，即可能会有bug。\n\n#### Testem\n- 基于nodejs,使用express和socketio; 2012年6月发布\n- 大概和karma差不多吧，没仔细看。Jeffrey Way和Stephen Thomas都推荐过它。\n\n#### TestSwarm\n- John Resig创建的分布式Javascript测试工具；\n- 开源；所有测试环境由服务器提供\n- 支持历史结果查询\n\n#### YUI Yeti\n- Yahoo团队，基于nodejs\n- 支持多种浏览器；可通过命令行运行。\n\n### 三，CI\n\n持续集成就是通常所谓的CI(Continuous integration)，持续不断的自动化测试新加入代码后的项目。它并不属于单元测试，而是另外的范畴，不过通过使用CI服务可以很容易的在Github上测试项目，而这也就是持续集成的意义。\n\n- Jenkins\n- Travis-CI\n","id":1},{"layout":"post","title":"使用Jekyll搭建静态博客","date":"2014-06-24","categories":"jekyll update","desc":"\"使用 Jekyll 在 Github 主页上搭建一个静态博客，支持markdown、支持分页、支持留言，并加入 Google analytics 代码追踪博客被浏览情况。\"","imgUrl":"data/post_thumb/jekyll.png","tag":"\"总结\"","filename":"2014-06-24-使用jekyll搭建静态博客.md","content":"\n\n![jekyll]({{site.url}}data/post_thumb/jekyll.png) ![jekyll](/data/post_imgs/jekyll-gitcat.png)\n\n<br/>\n\n> {{page.desc}}\n\n<br/>\n\n# 所需环境\n\t\n- Ruby, gem\n- `gem install jekyll` \n\n# 操作命令\n\t\n- 生成目录结构： `jekyll new project_name`\n- 构建并启动本地服务： `jekyll serve` －当文件更新时，会自动重新生成目录\n\n# 新增文章\n\t\n把文件添加进`_posts` 文件夹中，命名规范为：`YYYY-MM-DD-name-of-post.ext` \n\n# 调整样式\n\n- [SASS](http://sass-lang.com/)\n- [liquid template](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers)\n\n\n# 添加分页器\n\t\n- 在` _config.yml`文件中加入单页要展示的文章数量，如`paginate: 5`, 便可激活jekyll内置分页器;\n- 所有相关参数都在`paginator`变量中；\n\n# 加入图标，使博客更生动\n\n![Font Awesome]({{site.url}}data/post_imgs/fontawesome.png)\n\n[Font Awesome](http://fortawesome.github.io/Font-Awesome/)提供伸缩自由的矢量图标，可改变其大小、颜色等任何css属性。\n\n\n# 加入Google analytics，了解博客被访问情况\n\n- 在[GA官网](https://www.google.com/analytics/)注册;\n- 获取一段监控代码；\n- 在`head.html` 加入监控代码\n\n# 上传到 github\n\n- [Github page](https://pages.github.com/) 分为两种，实现上略微不同。作为主博客，使用第一种即可：\n\t- 个人网页 (User or organization site)\n\t\t- 仅能有一个，库命名要与github用户名保持一致，上传代码至`master`分支上。\n\t- 项目网页 (Project site)\n\t\t- 每个项目都可拥有项目网页，上传代码至`gh-pages`分支；\n- 不需要上传本地build好的`_site`文件夹内的东西，github本身已加入jekyll引擎，支持由jekyll驱动的网页。\n \n# 添加留言功能\n\n- [第三方留言工具 －Disqus](https://disqus.com/)\n\n\n# 一些技巧\n\n- 使用`site.url`写图片地址\n\n# 遇到的困难\n\t\n使用jekyll是需要ruby环境的，在`gem install jekyll`时，报错提示说openssl有问题。折腾了挺久，包括更新ruby版本，安装rvm去更新openssl，尝试了各种网上找的命令，最后有效的命令是：\n\n\trvm pkg install openssl\n\trvm reinstall all --force\n\n# 官网\n\n[http://jekyllrb.com](http://jekyllrb.com)\n\n","id":2},{"layout":"post","title":"Unit testing -前端单元测试","date":"2014-08-03","categories":"Note","tag":"\"体会\"","desc":"\"Unit testing是好东西，它能解决我们此刻面临的重大问题：开发效率。这半年来，深刻体会到平日工作内容最多最烦心的不是逻辑开发，而是debug.需求每天都在新增，项目在臃肿，经手的程序员也越来越多；一处无关痛痒的改动，往往会牵动另一处的代码，于是就陷入了无穷无尽的debug深渊中。\"","imgUrl":"data/post_thumb/mocha.png","filename":"2014-08-03-前端单元测试.md","content":"\n\n![jekyll](/data/post_thumb/MochaChaiSinon.png)\n\n近期被安排去调研前端Unit testing情况。从一无所知到有了个大致了解，自我总结一下。\n\n经过一系列比较，选择了`Mocha`测试框架，`chai`和`sinon`作为附加库；\n\n前端单元测试可分浏览器端和服务端。部署是比较简单的，浏览器端基本上就是一个html引入各种所需测试框架文件与测试用例，然后执行`mocha.run`即可；服务端也是全局`npm install mocha`后，直接在bash端执行mocha命令即可。\n\n不过一开始由于我并没有意识到有Browser和Server之分，而使用server那一套的部署方式捣鼓了很久，绕了很多圈子。Server端是没有document,windows等BOM对象的，所以根本是无法直接跑（后来发现了`jsdom`等，可在服务端模拟DOM，不过这是后话了），这是报错的原因，而我一直认为纠结于如何把浏览器端的seajs改为node端的seajs上。\n\nUnit testing是好东西，它能解决我们此刻面临的重大问题：开发效率。这半年来，深刻体会到平日工作内容最多最烦心的不是逻辑开发，而是debug.需求每天都在新增，项目在臃肿，经手的程序员也越来越多；一处无关痛痒的改动，往往会牵动另一处的代码，于是就陷入了无穷无尽的debug深渊中。\n当然，添加Unit test不是绝对的解决之法，最大限度的减少不必要的bug要各方面都一起加强：比如项目规范，逻辑开发时候考虑扩展性等等。\n\n#### 如何写测试用例？\n\n当明确了要添加Unit test后，就剩下测试用例要怎么写的问题了。理论上说这应该不是一个问题，但事实上这是最大的问题。\n\n1. 测交互；-各种操作的组合情况 -需要模拟每种情况，而组合很多\n2. 测DOM；-界面构建是否到达预期；-使用jq获取界面已创建好的元素，一一对比，十分繁琐；\n3. 测数据；-相对好测一点。\n\n所以如果真的使用TDD（测试驱动）的模式去开发，虽然维护效率会大大提升，但开发时间恐怕会增加一倍以上呢。或许不必要追求测试覆盖率100%，择取一些重点部分写测试用例吧？另外，写测试用例的过程也是强迫自己解耦模块的过程，因为太耦合的代码写起测试用例来只会吐血。\n\n#### TODO\n\n1. 自动化测试，看看是不是能与`grunt`结合起来；\n2. 调研一下无头测试- `phantomjs` ；\n3. 研究一下测试驱动器，如`karma`等;\n","id":3},{"layout":"post","title":"性能优化之图片篇","date":"2014-08-04","categories":"Note","tag":"\"学习总结、体会\"","desc":"\"PNG 和 JPG 格式的区别是什么？无损压缩是否就是完全不失真的压缩？雪碧图有何缺点？应选用那种图标形式？图片预加载和懒加载的应用场景是什么？\"","imgUrl":"data/post_thumb/image.png","trueDate":"'20150706'","filename":"2014-08-04-性能优化之图片.md","content":"\n\n\n# 选择合适的图片格式\n\n1. PNG \n\n\tPNG 属于无损压缩。无损压缩并不是绝对不损品质的压缩，它对图片的复原是基于储存的颜色索引表。当颜色索引表中的颜色数量小于图片的真实数量（如 png8 只能索引256种颜色）时，图片便会失真。所以 png 适合用于色彩相对规律的图片，如图标、数码绘等；另外 PNG 支持透明度，需要有透明效果的图片可选用 PNG 格式。\n\n\t当今设计潮流趋于平面化、轻量化、清爽型设计，大部分网页素材图片都是 PNG 格式。\n\n2. JPG \n\n\tJPG 属于有损压缩，根据人眼特性对图像进行适当降质处理。适合用于色彩错综复杂的图片，如摄影照片、用了很多光影滤镜的图、加了真实素材的图片等；\n\n\t需要注意的是，对色彩简单的图片，使用 JPG 反而还有可能增添无谓的噪点。\n\n3. GIF \n\n\t用于动态图；\n\n\n# 使用雪碧图\n\n- 把图标们拼在一张图上，利用css对其进行定位。非常常用的一种方法，好处就是大大减少请求量。\n- 缺点\n\t1. 浏览器缩放的时候边缘会露出其他图标；\n\t2. 有些图标不是常用图标，但也一起加载了进来；\n\t3. sprite图越来越大时，PNG 压缩有失真;\n\n<i class=\"fa fa-comment\"></i> 也说说图标\n\n使用雪碧图来集合众多图标是非常常见的一种方法，但不是那么灵活方便。而字体图标（Icon font）就更酷炫一点，可以自由伸缩、像css一样改变颜色大小等，自由度大大提高。但是这样的字体库非常大，无疑拖慢了网页访问速度。相比之下 SVG icon 的可控性就更强了，最起码不用加载一个如此硕大的字体库。虽然有浏览器兼容性问题，不过也值得用一用。\n\n- 一款之前我常用的字体图标库 －[Font Awesome ](http://fortawesome.github.io/Font-Awesome/) \n- 准备稍后研究研究的 SVG icon - [iconfont](http://www.iconfont.cn/)\n\n# 图片预加载和懒加载\n\n1. 什么情况使用预加载，什么情况使用懒加载？\n\t- 懒加载：\n\n\t\t应用于图片众多的场景，特别是多屏图片，如流图片展示，像花瓣网那种格式；按需加载，提高首屏展示速度。\n\t\n\t- 预加载：\n\n\t\t顾名思义，就是让图片预先加载到浏览器缓存中，如图片幻灯片，阅读漫画等。要预测用户行为，不能等点击下一张才开始加载图片；\n\n2. 预加载的两种方式：\n\t1. CSS \n\n\t\t其实就是利用 background 属性。只要这些图片的路径保持不变，当它们在Web页面的其他地方被调用时，浏览器就会在渲染过程中使用缓存。\n\n\t\t缺点：延长了 CSS 文件的下载时间。\n\n\t2. JS \n\t\t\n\t\t在页面加载完后，`window.onload` 后，通过 `new Image()`，并把图片赋值给 src 属性。回调时注意`complete`和`onload`属性。图片初次下载完成后会触发`onload`事件，而若已存在缓存中，就要通过判断`complete`去获取状态。\n\n3. 懒加载的两种方式：\n\t1. 纯粹的延迟加载，使用 `setTimeOut` 或 `setInterval` 进行加载延迟.\n\t2. 事件触发性加载，如click时才开始异步下载；或者监控滚动条，保证可视区的加载。\n\n\n一个懒加载插件： [jquery-lazyload](http://www.appelsiini.net/projects/lazyload)\n\n\n# 其他提高用户体验的图片优化方案\n\n- 先快速加载小图，虽比较模糊，等大图下载完了替换小图，图像变清晰。这样就不会让用户感到在白等图片下载。\n- (待补充...)\n\n\n# 参考文章\n\n- [淘宝开放平台-前端性能优化](https://open.taobao.com/doc/detail.htm?id=101942)\n- [Lazy Load Plugin for jQuery](http://www.appelsiini.net/projects/lazyload)\n- [Javascript图片预加载详解](http://www.cnblogs.com/v10258/p/3376455.html)\n- [Taobao UED -图片格式与设计那点事儿](http://ued.taobao.org/blog/2010/12/jpg_png/)\n","id":4},{"layout":"post","title":"关于跨域的一次尝试","date":"2014-10-14","categories":"js","tag":"学习总结","imgUrl":"data/post_thumb/js.png","desc":"在页面A中，填写A页面的表单(dataA)，然后继续在A页面中去访问非同源的B页面，在B页面操作并获得数据dataB，跳回A页面保存全部数据。","filename":"2014-10-14-跨域.md","content":"\n\n\n## 需求\n\n在页面A中，填写A页面的表单(dataA)，然后继续在A页面中去访问非同源的B页面，在B页面操作并获得数据dataB，跳回A页面保存全部数据。\n\n## 设计\n\n![通讯方式]({{site.url}}data/cross/desc.png)\n\n通讯方式：\n\n- 客户端与客户端：`<iframe/>`内嵌窗体\n- 客户端与服务器：ajax\n- 服务器与服务器：tcp\n\n## 流程\n\n#### 1. 填写A页面的表单\n\n![第1步]({{site.url}}data/cross/1.png)\n\n- 填写A页面的表单- dataA；\n- A与B进行服务端对服务端的TCP通信：A用事先与B协议好的密钥key，向B请求连接；\n\n#### 2. 在A页面中访问B页面，填写B页面表单\n\n![第2步]({{site.url}}data/cross/2.png)\n\n- B通过验证后，返回给A登录码(ticket)和B前端访问地址(url)；\n- A前端生成一个全局回调函数名`cb_name`;`cb_url`为回跳地址;\n- A在前端页面嵌入src为此url的子窗体，url上附带参数`cb_name`和`cb_url`,打开了B页面；（使用ticket通过B服务端的登录验证）\n- 用户在B页面操作\n\n#### 3. 返回A页面，保存全部数据\n\n![第3步]({{site.url}}data/cross/3.png)\n\n- B前端重定向回A前端页面；`window.location.href = [cb_url]` (此时`cb_url`直接附带上`cb_name`和dataB返回)\n- 回跳地址是一个静态页面，没有业务逻辑，只是负责处理回跳：\n\t1. 解析url,拿出searh里的dataB以及`cb_name`；\n\t2. window.top 因为此时在在window的iframe下，所以要拿最高处的window对象;\n\t3. 调用全局随机命名闭包函数。\n\t4. 最后删除引用，释放空间\n- A服务器保存dataA和dataB到数据库；\n\n\n弊端：dataB只能是少量数据，因为是作为url附加参数返回的。\n\n前端部分代码\n===================================\n{% highlight javascript %}\n\n...\t\nload: function(){\n\tvar config = this.config;\n\t\n\t// 与服务端通信\n\tpubjs.mc.send(config.urlLoad, {\n\t\tcbUrl: window.location.origin+'/callback.html?cb='+ config.cbName\n\t}, this.onData);\n},\n// 服务端返回\nonData: function(err, data){\n\tvar config = this.config;\n\n\tvar iframe = this.$iframe;\n\n\t// 获取表单 A 的数据\n\tvar dataA = this.getData();\n\t\n\t// 全局函数\n\twindow[this.$cbName] = function(data){\n\n\t\t// 把表单 A,B 的数据一起保存\n\t\tpubjs.mc.send(config.urlSave, {\n\t\t\tdataB: data.dataB,\n\t\t\tdataA: dataA\n\t\t}, function(){\n\t\t\tiframe.hide();\n\t\t});\n\t};\n\t\n\t// 显示 iframe\n\tiframe.show();\n\n\t// cbUrl 由服务端返回，已带上 ticket 信息\n\tiframe.attr('src', data.cbUrl);\n}\n...\n{% endhighlight %}\n\n**回跳地址页面中的逻辑**\n\n{% highlight javascript %}\n\nvar hash = window.location.href.replace(/^[#\\/\\!]+/, '');\nvar search = hash.split('?')[1];\nsearch = search.split(\"&\");\nvar data = {};\nfor(var i =0;i<search.length;i++){\n\tsearch[i] = search[i].split(\"=\");\n\tdata[search[i].shift()] = search[i].join('=');\n}\n\nvar name = data.cb;\n\n// 调用全局函数\nwindow.top[name](data);\n\n// 解除引用\nwindow.top = null;\n\n{% endhighlight %}\n\n\n在遵循浏览器同源策略下的跨域操作:\n====================================\n1. 图片ping\n\t- 只能发请求，没有数据返回；可方便地监听请求成功还是失败。\n\t- 应用场景：广告统计\n2. jsonp\n\t- 可发请求，也可获取从对方服务器返回的数据。\n\t- 应用场景：单点登录\n3. iframe与window.fun()\n\t- 与jsonp原理一样，但它可以打开对方网页，让用户在对方网页做操作。交互更加丰富。\n\t- 应用场景：同时需要用户在本地网站与非同源网站填写信息。\n4. HTML5 postMessage\n\t- 用法：`otherWindow.postMessage(message, targetOrigin);`\n\t- ie6, ie7 不支持\n\n\nAccess-Control-Allow-Origin\n===============================\n\n- 真正的直接支持跨域，而不是'达到跨域效果的跨域技术'；\n- 要考虑安全性问题；\n- 服务器也要做相应的回应处理（即返回`Access-Control-Allow-Origin`）；\n- 在IE下是XDR,chrome等浏览器的XHR直接支持。","id":5},{"layout":"post","title":"ReactJS 初探","date":"2015-01-01","categories":"Note","tag":"笔记、总结","desc":"ReactJS 近来大红大紫，Angular 背后大山是 Google, React 的大山是 Facebook,都是互联网大佬啊。于是我忍不住也来捣鼓捣鼓，它有哪些亮点呢？好用不？实用不？","imgUrl":"data/post_thumb/reactjs.png","filename":"2015-01-01-reactjs初探.md","content":"\n\n![reactjs](/data/post_imgs/reactjs.png)\n\n\n<br/>\n\n> {{page.desc}}\n\n<br/>\n\n# React的亮点\n\n一、**虚拟 DOM** \n\n为了解决 DOM 渲染慢带来的性能问题，应最大限度地减少 DOM 操作。 React 在每次渲染页面前，都会先构建一个虚拟 DOM 树，当数据变化时，又创建另一个虚拟 DOM 树，同时与前一个虚拟 DOM 对比，得出两者不同之处，只针对不同之处来更新实际的 DOM 结点。虚拟 DOM 本质是一些轻量级的 Javascript 对象。\n\n##### <i class=\"fa fa-link\"></i>  [关于 React 实现这个的 diff 算法，查看 Fackbook工程师 Chedeau的这篇文章。](http://calendar.perfplanet.com/2013/diff/) \n\n二、 **组件化 Component** \n\nReact 不做控制器、视图等的分类，而是直接按照功能划分，把大功能切分成一个个小小的组件。这又回到了出现 MVC 之前的世界，但又解决了模块混乱的问题。 \n\n##### <i class=\"fa fa-question-circle\"></i> MVC 好？还是组件化好？\n\n我感觉，在MVC 方式下，开发一个功能要三个地方来回切换，挺麻烦的，而优点是分工明确，特别是独立出来的 view，一目了然。而React 组件化，虽然开发思路变得流畅起来，但是视图很不直观。\n\n三、**单向数据流 One-way data-binding**\n\nAngular 等框架的数据双工绑定的特色，一度成为一个大亮点，给人一种数据非常实时化的感觉。 React 则推崇单向数据流，所有的状态指令都应该从顶级模块往下派发，保持清晰。React 也可模拟这种双工绑定的效果，利用 prop 传递 callback 函数来实现子类向父类通信，本质依旧是单向数据流形式。\n\n##### <i class=\"fa fa-question-circle\"></i> 双工好？还是单向好？\n\n双工有它的弊端，比如在 Angular 下，如果出现有计算值的时候，需要 $watch 多个 input。而当数据变化时候，无法清晰地判断出是哪一个 input 引起的更新；另一方面，React 保持所有指令都从最顶级开始下发，虽然很清晰。但同时也感到， React 在模拟双工绑定时候，变得很迂回很绕，感觉就像为了保持一个方向前进，不得不做出了很多倒退的动作。\n\n\n# React 基础用法\n\n- `React.createClass` \n\t- 构造函数。\n\n- `React.render` \n\t- 实例化。\n\n- JSX and React.DOM\n\t- 两种不同的写法风格，倾向于 JSX,因为更能看出 DOM 结构来。\n\n- state\n\t- 根据 state 的变化，渲染 DOM；\n\t- 想修改 state 的值，通过`setState()`函数去修改；\n\t- `setState()` 触发 reconciliation 过程，创建或者更新虚拟 DOM。\n\n- props\n\t- state 变化时候，通过 props,自上而下地影响，让子类跟着变化；\n\t- 通过 props，连通父类和子类。“ owner 的说法挺有意思”；\n\t- `propTypes:{}` 可做格式验证。\n\n- event\n\t- 是 React 自己合成的 event；\n\t- delegation 形式放在 top level 结点中；\n\t- 自动绑定了 this 上下文。\n\n- refs\n\t- 通过设置 ref 属性，使父类可获取到子类的 DOM 结点；\n\t- 设置 ref 后，注意 ref 返回的那个对象也是个 component；\n\t- `getDOMNode()` 返回真实的 DOM 结点。\n\n- addons\n\t- 可使用 addons 简化代码\n\t\t- `LinkedStateMixin`: 简化了表单输入框数据与 state 间的逻辑，本质是封装了一下 onchange/setState()等系列操作 \n\t\t\t- 用法：\n\t\t\t\t- 引入： `mixins: [React.addons.LinkedStateMixin]`；\n\t\t\t\t- 属性： `valueLink={this.linkState('xxx')}`。\n\t- 其他简化形式`<Component {...this.props} more=\"values\" />`。\n\n\n\n# Demo －使用 React 构建一个实时投票应用\n\n![react-voting](/data/post_imgs/react-voting.png)\n\n1. 描述\n\t- 一个使用 React.js 做的简易投票系统，可新增项目、为项目投票，并实时渲染投票结果。\n\n2. 启动\n\t- `gulp serve`\n\n3. component 划分\n\n\t\t顶级\n\t\t\t- <AddBtn>\n\t\t\t- <FeedForm>\n\t\t\t- <FeedList>\n\t\t\t\t- <FeedItem>\n\n4. 添加事件\n\t1. 顶级模块与子类模块的通信：\n\t\t- 和 `<AddBtn>` 的通信： isShowBtn, onButtonClick();\n\t\t- 和 `<FeedForm>` 的通信： isShowForm;\n\t\t- 和 `<FeedItem>` `<FeedList>` 的通信： onVote();\t\n\t\t- 和 `<FeedForm>` 的通信： onNewItem().\n\n\t2. 交互\n\t\t1. 按钮\n\t\t\t- 点击 add 按钮，toggle 表单的展现，同时改变按钮的样式和文字\n\t\t2. 表单\n\t\t\t- 填写 `title` 和 `desc` ，点击按钮，grid 中即时新增一条记录。同时重置 form。\n\t\t\t- refs: `title`, `desc`, `form`; 注意写法： `this.refs.title.getDOMNode().value`\n\t\t3. 箭头\n\t\t\t- 点击上下按钮增减投票数，低于0票时显示红色样式\n\n5. 连接数据库 -[Firebase](https://www.firebase.com/)\n\t- Firebase 和 react 搭配非常好；\n\t- 特点\n\t\t1. Realtime Database; \n\t\t2. Stored as JSON objects\n\n6. [下载demo代码](https://github.com/heydelilah/exercises-FrontendFramework/tree/master/react-voteit)\n\n# 相关资源\n\n1. [Reactjs官网](https://facebook.github.io/react/)\n2. [Pete Hunt -Secrets of the Virtual DOM](https://facebook.github.io/react/docs/videos.html#secrets-of-the-virtual-dom--mtnwest-js)\n3. [tuts+ : Getting Started With React.js](https://code.tutsplus.com/courses/getting-started-with-reactjs/lessons/jsx-vs-reactdom)\n\n\n\n\n","id":6},{"layout":"post","title":"使用Angular实现一个Web-app通讯录","date":"2015-05-05","categories":"Note","tag":"总结","desc":"使用Angular和Nodejs实现一个简易的Web App通讯录，支持增删改查、搜索、设置显示列、以及用户权限控制(signup,login,logout)。","imgUrl":"data/post_thumb/angular.png","filename":"2015-05-05-angular通讯录.md","content":"\n\n> {{page.desc}}\n\n\n![contats]({{site.url}}data/post_thumb/angular-contacts-edit.png)\n\n# 涉及的中间件、插件、工具库等\n\n- Angular\n\t- ngResource\n\t\t- 提供了与符合RESTful架构的服务端数据资源交互。\n\t\t- `$resource`\n\t- ngRouter\n\t\t- 提供路由服务；\n\t\t- $route 监控 `$location.url()`变化，匹配相应定义好了的路径；\n\t\t- 使用`$routeProvider`提供的api去定义路由。\n\t- ngMessages\n\t\t- 为在模版中展示/隐藏消息提供增强服务\n\t\t- 以`ngModel` 提供的`$error`对象作为判断依据\n- Nodejs (express)\n\t- body-parse 解析请求中的参数\n\t- express-session\n- Bourne -模拟数据库\n- Bootstrap －样式\n- Jquery \n- 其他：\n\t- nodemon: 监听 node 服务，当文件有变动时，自动重启服务\n\n# Angular 核心\n\n1. controller\n2. divective\n3. factory\n4. filter\n\n# 路由设计\n\n- `/contacts` -首页／通讯录列表页\n- `/contacts:id` -单条信息\n- `/contacts/add` -新增\n- `/login` -登录与注册页\n- `/setting` -设置页\n\n# API 设计\n\n1. 通讯录增删改查\n\t- `/api/contacts` \n\t\t- POST 新增单条记录\n\t\t- GET 获取所有记录\n\t- `/api/contacts:id` 根据 id ，操作某一条特定记录\n\t\t- GET 获取\n\t\t- PUT 更新\n\t\t- DELETE 删除\n2. 设置\n\t- `/option/display_field` 设置可展示的列\n\t\t- GET 获取\n\t\t- POST 更新\n\n3. 用户操作\n\t- `/login` 登陆\n\t\t- GET 判断当前登陆状态\n\t\t- POST 登入\n\t- `/signup` 注册\n\t\t- POST\n\t- `/logout` 登出\n\t\t- GET\n\n# 资源\n\t\n参考教程来源于: [tutsplus网站](https://code.tutsplus.com/courses/building-a-web-app-from-scratch-with-angularjs)\n\n\n","id":7},{"layout":"post","title":"我所理解的DSP和SSP","date":"2015-06-06","categories":"Note","tag":"总结","desc":"在互联网广告行业中已工作两年，刚入行时候对“互联网广告”的概念很模糊，慢慢地才了解到这是一个非常有趣的行业。总结一下我所理解的 DSP 和 SSP","imgUrl":"data/post_thumb/dsp-ssp.png","filename":"2015-06-06-DSP和SSP.md","content":"\n\n在互联网广告行业中已工作两年，刚入行时候对“互联网广告”的概念很模糊，慢慢地才了解到这是一个非常有趣的行业。总结一下我所理解的 DSP 和 SSP 。\n\n# 什么是DSP?\n\nDSP, 全称 Demand Side Platform, 即广告需求方平台，为广告主服务。\n\n举个实际的例子，广州37wan游戏公司（广告主），当它新推出一款网页游戏时，便会在各大网页投放大量广告去宣传这款游戏。而投放广告，最在意的是“精准”。\nDSP 就是为这类想做精准投放的广告主服务的。37wan 游戏公司在DSP平台上，制定广告投放方案，如主打人群、地区、时段等。假设这是一款格斗游戏，那么或许 37wan 会主打青少年男性游戏人群。\n\n\n# 什么是SSP?\n\nSSP, 全称Supply Side Platform, 广告供应方平台，为媒体主服务。\n\n有买家就自然有卖家，比如个人站长拥有自己的网站，用户流量比较稳定时候便会考虑引入广告来增加收入，那么这位站长就可以通过SSP去找到合适的买家了。比如阮一峰大神的博客上，就有很抢手的广告位招租，那么他就可以通过使用 ssp 提供的服务，使得自己的广告费受益最大化。\n\n# 很有名的一张图\n\n![rtb](/data/post_imgs/dsp-ssp.png)\n\n# 什么是RTB？\n\n刚说了一点DSP和SSP，但还没讲到最有趣的部分。互联网广告行业对于我来说之所以有趣，就在于实时竞价（即RTB－real time biding)。跟传统购买形式相比，RTB是在每一个广告展示曝光的基础上进行竞价，就是每一个PV都会进行一次展现竞价，谁出价高，谁的广告就会被这个PV看到。\n\n举个例子，小红和小明在同一时间点击了优酷网站上的同一个视频，正式视频播放前播放了一段15秒广告，小明看到的是汽车广告，小红看到的是化妆品广告。这中间发生了什么？\n\n当小红和小明通过浏览器访问优酷某个视频时，cookie或者ip等可锁定这个用户（浏览器就相当于这个用户）的信息便从优酷网站后端，通知给各大DSP平台，“小红（小明）来啦，你们要不要抢？”。DSP平台的背后是各种广告主，如汽车广告主A通过DSPA,看到了小明，认为这是个重要的客户，于是就出价10元，化妆品广告主B认为小明并不是消费人群，所以只出价了1元。那么最后由A得标，对小明展示的就是汽车广告。这一系列的判断过程都是100毫秒内完成的，这也要求了DSP平台是具有高响应速度。\n \n\n# 关于“广告精准投放”\n\n精准投放就是把合适的广告给合适的人。既然有竞价过程，那什么情况出多少价钱就很重要了。判断是不是目标人群？要不要出高价？这涉及很多方面：\n\n1. 投放策略：广告主首先分析好自己的需要，制定正确的好计划。有一系列的定向选项，如人群，时段，地区，哪些站点等。\n2. 私有数据：数据当然是最重要的。DSP根据自己的数据，准确判断出来者是何人？\n3. 智能竞价：不断调整出价，抢到更多合适的广告展示机会。某个广告位的点击率很好，出价调高点去抢更多的展示量，某个广告位竟得率虽然很高，但是没什么点击或者注册，便调低出价或者甚至不出价。这是个动态过程，时刻刻都在变化。一个好的DSP系统是有精良算法的系统，能实现最佳的自动调价优化。\n4. 查看报表：根据投放历史生成的详细的反馈报告，供客户下一次拟定投放策略。\n\n# 一些术语\n\n- 广告位\n\t- 展示广告的位置。RTB广告位来源于每个Exchange对接给我们的广告位，广告主可以对广告位进行竞价展示自己的RTB广告。广告监测广告位来源于广告主自己购买的广告位，需要手动添加到系统里面。\n- 创意与创意包\n\t- 创意可以说就是广告素材，或者广告本身。\n\t- 创意包是指同一素材的各个尺寸形成的创意组，因为不同网页上的广告位尺寸截然不同，所以需要一组尺寸去适配不同的广告位。\n- 落地页\n\t- 落地页即Landing Page，点击广告位上的广告素材后出现的页面。如点击一个游戏广告后，网页跳转到一个游戏注册页。\n- PV\n\t- PV是page view的简写。PV是指页面刷新的次数，每一次页面刷新，就算做一次pv流量。\n- 展示量 \n\t- 广告被访问者浏览的次数 \n- cpm\n\t- 千次展现成本，简称CPM单价，指广告每展示1000次所付的费用,CPM是最常用的网络广告定价模式之一。目前\n- cpc\n\t- 指广告每次被点击所消费的费用;如关键词广告一般采用这种定价模式。\n- 竞价请求数\n\t- 广告活动收到Exchange的竞价请求数量\n\n# 一些好玩的点\n\n“最高价竞标，次高价结算” 非常有意思。 a出价10元，b出价5元，c出价1元。最后a竞标成功，付款5元。\n\n最初我听说这个规则时，就感到很好玩。我觉得这是供应方为了鼓励广告主大胆出高价的一个小计谋，后来才发现还不仅仅是这样。\n\n在SEM（关于搜索引擎关键词竞价）里，如果按照传统拍卖的方式结算，那么a以10元竞标后，由于b的心理最高价是5元，它不会再和a争，但是由于b后位的出价都很低，于是b把价格调到1.1元就可以保住第二位的位置。a发现b调价后，自己当然也不再以10元去竞价，所以又立刻调整为1.2元。b这时也会立刻调整为1.3，两者递增加价直到超过了b的5元，又跌至1.1元，不停循环下去。双方都是系统程序化去自动调价，乐此不疲但是毫无意义。而次高价结算方式就可避免这种无聊的循环，当a以10元竞得成功，而以b的价格结算。第一次以5元结算，b调整为1.1元时，就以1.1结算。双方某程度的共赢，因此稳定下来了。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","id":8},{"layout":"post","title":"关于BiddingX 项目的一些思考","date":"2015-04-23","categories":"Note","tag":"总结","desc":"BiddingX项目是我工作这两年来一直在开发和维护的主要项目，在此自我整理一下工作时的心得体会。","imgUrl":"data/post_thumb/biddingx.png","filename":"2015-07-23-biddingx.md","content":"\n![sunteng](/data/post_imgs/biddingx-logo.png)\n\n![sunteng](/data/post_imgs/biddingx-grid.png)\n\n<p style=\" font-size:10px; text-align:center\">图片来自 <a href=\"http://www.biddingx.com\"><i>BiddingX 官网</i></a></p>\n\n# BiddingX 是什么？\n\nBiddingX 是互联网广告 DSP 平台，为广告商提供广告投放解决方案。通过大数据分析，实现广告精准投放。B2B级的产品。\n\n\n# 前端用到哪些技术?\n\n属于大型web app, SPA ，繁多的操作，复杂的交互。\n\n#### 1. Pubjs框架：\n\n- 使用 Seajs 做加载依赖，模块化开发；\n- 类式继承；\n- SPA 单页面应用, hash 路由，Javascript 动态构建；\n- 消息机制，分为冒泡、广播以及模块对模块通信；\n- 与服务端通信基本上使用 Ajax, 后期加入了 Websocket 做消息主动推送；\t\n- 封装 Jquery 以及自定义的工具库，方便 DOM 操作；\n- 封装 AvalonJs 框架，使用 html 模版，数据双工绑定\n\n#### 2. 样式：\n\n由于公司的设计部门向来话语权微弱，于是在视觉设计方面几乎是前端工程师“为所欲为”的局面。视觉规范直接使用了一个轻量级的开源界面包 [uikit](http://getuikit.com/)，图标采用 [Font-Awsome](http://fortawesome.github.io/Font-Awesome/)。 设计部门和前端部门的合作，基本上只在交互设计的层面。\n\n使用 LESS 编写 css， Grunt做 LESS 编译. css 命名规范遵循 BEM 思想，模块、组件、业务区别开来。\n\n#### 3. 兼容性：\n\n由于 BiddingX 是 B2B 级的产品，且面对的使用者都是得经过培训，所以对浏览器兼容性方面没太花精力去做，虽开发中会注意兼容性问题，但是没有全面测试。对于用户，通通都推荐他们使用 Chrome。\n\n#### 4. 工具：\n\n- 使用 Grunt 做 LESS 编译，Jshint 代码检查，自动化生成css雪碧图，代码压缩\n- 使用 Git 做版本控制\n\n# Biddingx 存在哪些问题？\n\n- 项目庞大，存在大量多余的功能，亟待清理；\n- 模块混乱，耦合严重，难以进行单元测试；\n- 由于采用了js动态构建页面的方案，对dom的操作过于频繁，引发了大量的重绘重排；更重要的是html与js交融在一起，使得debug难度增大；\n- 与后端部门的冲突。由于历史原因，一些数据结构的规范模棱两可，导致前端做了很多数据转换的无谓工作；\n\n# 重构是怎么进行的?\n\n第一步是与产品部门一起从头理清项目需求，取其精华，去其糟粕，大量删减老旧功能。\n\n借鉴 Angular 框架的数据双工绑定功能。经过调研后，决定把国内司徒正美的一个改良版的轻量级框架 AvalonJs ，引入我们自己的 Pubjs 前端框架中。这是一个让我们开发上大改变的举动，因为在此之前，我们的开发流程基本上是，调用组件构建页面，小的地方直接 js 操作 DOM 元素去完成。而引入了 AvalonJs 后，真正实现了 html 与 js 逻辑代码分离，无论是开发、还是后期维护的效率都大大提高。\n\n调研前端单元测试，本来计划从组件开始，把全部基本组件都补齐用例。不过由于时间关系，一直被delay了。于是只是搭建了个单元测试的环境，使用 Mocha 写断言，Grunt 自动运行用例。但用例基本上处于空状态。\n\n最后说一说后端部分\n\nBiddingx 项目的后端分为三级，最表层是应用层，由 PHP 所写，主要内容就是增删改查、搜索过滤等业务性的功能。而底层支持是 Golang 所写，支撑整个实时竞价平台，高并发，毫秒级响应。最后一部分是算法部门的工作，处理的就是关于数据挖掘之类的工作，广告投放是否精准，就要靠他们来提供方案了。\n\n在 Biddingx 前端重构时，由于后端部门并不愿意改动旧的数据结构，“一气之下”，前端老大把原来由后端部门负责的业务应用层揽了过来，按照前端组优化过的新数据结构规范，使用 Nodejs 代替 PHP ，重写了整个业务层。\n\n那一段时间虽然每天加班，但是时时刻刻都处于“全栈工程师”的兴奋之中。然而想象总是特别美好的，由于旧业务层庞大，前端组有心无力，连续加班3个月，疲倦不堪之中只是勉强出了个 bugs 超多的版本。\n\n\n# 反思重构不顺利的原因是什么？\n\n- 时间问题。简单的说，就是老板要求尽快上线的紧急程度超过了前端组的最初估计；\n- 沟通问题。和后端部门没有达成共识，以至于后来的合作上出现的种种冲突让双方都感到郁闷；\n- 技术问题。想把牛逼的新技术新东西都塞进去，前端老大是没问题，但是仅凭一人之力是搭不起万里长城。而组员既要赶工现有进度的同时，也要把之前没啥经验的新东西塞进去，出bug率增高。\n","id":9},{"layout":"post","title":"Javascript 继承","date":"2015-08-02","categories":"Note","tag":"学习笔记","desc":"学习笔记。复习一下 Javascript 中的原型链与几种继承方式。关键词：prototype, __proto__, contructor, 组合继承，寄生组合式继承，ExtJS, Pubjs 等等。","imgUrl":"data/post_thumb/chain.jpg","filename":"2015-08-02-类式继承.md","content":"\n\n\n# prototype 对象\n\n每个函数都有一个 `prototype` 属性，这个对象里面的方法和属性可由实例们共享。且该对象自动获得 `contructor` 属性，指回构造函数。\n\n使用 `new` 关键词、通过构造函数创建出来的实例，默认拥有 `__proto__` 属性, 这个指针指向构造器函数的 `prototype` 属性。\n\n\n# 原型链\n\n通过 `__proto__` 指针，把父和子的 `prototype` 连起来。\n\n\tSubType.protype= new SuperType();\n\n不足之处：\n\n1. 引用类型值，如数组。实例的改动会影响父类的值。\n2. 无法向父类传递参数。\n\n# 组合继承\n\t\n使用 `call()` 方法；\n\n\tfunction SubType(name, age){\n\t\tSuperType.call(this, name);\n\n\t\tthis.age = age;\n\t}\n\n不足之处：\n\t效率不高，重复调用了父类构造函数。\n\n# 寄生组合式继承\n\n通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。\n\n相当于跳过了 `SubType.protype= new SuperType();` 这步，但是手动地把 `__proto__`, `contructor` 指针都补回去了。\n\n{% highlight javascript %}\nfunction object (o) {\n\tfunction F(){};\n\tF.prototype = o;\n\n\t// 通过 new 关键词创建出来的实例，\n\t// 默认带上 __proto__ 指针，指向构造函数对应的 prototype 属性对象。\n\treturn new F(); \n}\n\nfunction inheritPrototype(subType, superType){\n\tvar prototype = object(superType.prototype);\n\n\t// 补回 contructor 属性\n\tprototype.contructor = subType;\n\n\tsubType.prototype = prototype;\n}\n\n// 父类\nfunction SuperType(name){\n\tthis.name = name;\n\tthis.colors = ['red', 'blue', 'green'];\n}\n\nSuperType.prototype.sayName = function(){\n\tconsole.log(this.name);\n}\n\n// 子类\nfunction SubType(){\n\tSuperType.call(this, name);\n\n\tthis.age = age;\n}\n\ninheritPrototype(SubType, SuperType);\n\nSubType.prototype.sayAge = function(){\n\tconsole.log(this.age);\n}\n{% endhighlight %}\n\n![inheritance](/data/post_imgs/inheritance.png)\t\n\n# ExtJS 的继承方式\n\n最初的 ExtJS 只是 YUI 的一个扩展包，后来更名为 Sencha。\n\n`Ext.extend(subclass,superclass,[overrides])`\n\n参数说明： 1. 子类；2. 父类；2. 要覆盖的方法或者属性。\n\n\n# Pubjs 的继承方式\n\n1. 借鉴的就是 ExtJS 的继承方式；\n\n2. 使用方式\n\n\t\tvar SubType = SuperType.extend({\n\t\t\tmethod_a: function(){ }\n\t\t});\n\n3. 要点\n\n\t- 所有模块继承自 Module 模块， Module 模块继承自 noop() 空函数；\n\t- constructor 写回构造器: `c.constructor = Class;`\n\t- 所有模块都被添加上 extend 方法: `Class.extend = this.extend;`\n\t- 其中的 Super() 函数，相当于是寄生组合式继承中的 object() 的 F() 函数, 只是作为一个中间tmp层，使用 new 关键字，为子类添加上 `__proto__` 属性, 并指回父类的 `prototype` 属性。 它在函数内部作用域，之后被垃圾回收清除掉。\n\n# 几个方法\n\n- **instanceof** 操作符：检测对象类型\n\t- person1 instanceof Person\n- **isPrototypeOf()** : 实例的 `__proto__` 属性是否指向构造器的 `prototype` 属性\n\t- Person.prototype.isPrototypeOf(person1)\n- **hasOwnProperty()** : 检测一个属性是否存在实例中，因为该方法不会向上遍历原型对象。\n\t- person1.hasOwnProperty(\"name\")\n\n# Todo\n\n- 研究一下 ECMAScript5 中的 Object.create();\n- 为啥非得把 constructor 属性给补回去？\n\n# 参考\n\n- 《Javasript高级程序设计》\n- [ExtJS 中继承的分析](http://outofmemory.cn/code-snippet/33376/ExtJS-parse)","id":10},{"layout":"post","title":"关于 position","date":"2015-11-24","categories":"Note","tag":"学习笔记","desc":"从 css 动画导致了 position","imgUrl":"data/post_imgs/position-fixed2.png","filename":"2015-11-21-position-fixed失效问题.md","content":"\n\n### 一、背景\n\n\t当即将离开可视区域时，让下拉框固定在头部\n\n### 二、解决思路\n\n通过“position: fixed”属性去定位\n\n\t$(window).scroll(function(){\n\t\tvar H = $(window).scrollTop();\n\n\t\tvar h = $('.container').offset().top;\n\n\t\tif(H > h){\n\t\t\t// 添加 position: fixed; 属性\n\t\t}\n\t})\n\n![position-fixed](/data/post_imgs/position-fixed.png)\n\n### 三、然而事情并不如我预期\n\n`position: fixed; `看上去失效了，并不以浏览器为坐标系，固定在上方。\n\n![position-fixed](/data/post_imgs/position-fixed2.png)\n\n### 四、分析原因\n\n此外层容器是有一个渐入显示的动画效果的（transform）。而正是这个动画使得该容器新增了坐标系。\n\n![position-fixed](/data/post_imgs/position-fixed4.png)\n\n### 五、为什么浏览器为了实现动画效果，需要建立新的坐标系？\n\n![position-fixed](/data/post_imgs/position-fixed3.png)\n\n### 六、解决方案\n\n用 absolute 模拟 fixed 的效果\n\n![position-fixed](/data/post_imgs/position-fixed5.png)\n","id":11},{"layout":"post","title":"Object.defineProperty()函数 在 vue 响应式系统的中应用","date":"2016-03-04","categories":"Note","tag":"学习笔记","desc":"Vue.js 框架是一个入门门槛低、上手非常快的框架，它也实现了类似 `Angular` MVVM 双向绑定响应系统，但实现方式更为优雅、简洁。其中最主要使用了 ES5 `Object.defineProperty()`，通过设置 getter/setter 勾子，实现监听 model 的变化，作出相应的视图响应。下面我们从 ES5 的 JS 对象说起...","imgUrl":"data/post_imgs/define-property/attributes-object.png","filename":"2016-03-04-defineProperty在vue中的应用.md","content":"\n\n### 一、前言\n\n[Vue.js](http://cn.vuejs.org) 框架是一个入门门槛低、上手非常快的框架，它也实现了类似 `Angular` MVVM 双向绑定响应系统，但实现方式更为优雅、简洁。其中最主要使用了 ES5 `Object.defineProperty()`，通过设置 getter/setter 勾子，实现监听 model 的变化，作出相应的视图响应。下面我们从 ES5 的 JS 对象说起...\n\n### 二、attributes 对象\n\n![defineProperty](/data/post_imgs/define-property/attributes-object.png)\n\n1. JS 对象里每个属性都有一个对应的 `attributes 对象`，保存该属性的一些元信息；\n2. 使用 `Object.getOwnPropertyDescriptor(people, ‘name')` 可读取 `attributes 对象`;\n3. `Object.defineProperty()` 方法，通过定义 attributes 对象，来定义或修改一个属性。\n\n\n### 三、getter/setter\n\n除了直接定义 value 以外，属性还可以用 get/set 函数定义;\n当对其取值时，get 函数会自动调用；当对其赋值时，set 函数会自动调用\n\n![defineProperty](/data/post_imgs/define-property/get-set.png)\n![defineProperty](/data/post_imgs/define-property/get-set-result.png)\n\n### 四、mvvm in vuejs\n\n> 把一个普通对象传给 Vue 实例作为它的 data 选项，Vue.js 将遍历它的属性，用 Object.defineProperty 将它们转为 getter/setter。这是 ES5 特性，不能打补丁实现，这便是为什么 Vue.js 不支持 IE8 及更低版本。\n\n[进入 vuejs 官网](http://cn.vuejs.org/guide/reactivity.html)\n\n![defineProperty](/data/post_imgs/define-property/mvvm-in-vuejs-intro.png)\n\n### 五、简单实现一个数据双向绑定功能\n\n![defineProperty](/data/post_imgs/define-property/mvvm-in-vuejs-demo.png)\n\n![defineProperty](/data/post_imgs/define-property/mvvm-in-vuejs-demo-flow.png)\n\n\n[在 jsfiddle 中查看](https://jsfiddle.net/justworm/crxhvcow/)\n","id":12},{"layout":"post","title":"SVG 和 CSS 动效初探","date":"2016-03-18","categories":"Note","tag":"学习笔记","desc":"回想一下，好像一直以来没怎么真正去做过什么 CSS 动画效果。这次通过几个动效，学习学习。","imgUrl":"data/post_thumb/css-animation.png","filename":"2016-03-18-css动画.html","content":"\n\n<style>\n\n\ti{\n\t\tmargin: 0 2px;\n\t\tcolor: #21779b;\n\t\tfont-style: normal;\n\t}\n\n\t.detail p{\n\t\ttext-indent: 1em;\n\t}\n\n\t.outline {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tpadding-left: 1em;\n\t\tmargin-bottom: 20px;\n\t}\n\t.outline li{\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tlist-style: none;\n\t\tmargin-bottom: -20px;\n\t}\n\n\t/* 旋转 */\n\t@keyframes rotate-clockwise\n\t{\n\t\tfrom {\n\t\t\ttransform: none;\n\t\t\t-webkit-transform: none;\n\t\t}\n\t\tto {\n\t\t\ttransform: rotate(360deg);\n\t\t\t-webkit-transform: rotate(360deg);\n\t\t}\n\t}\n\n\t/* 闪烁－忽明忽暗效果 */\n\t@keyframes flicker\n\t{\n\t\t0% {\n\t\t\topacity: 0.5;\n\t\t\tstroke-width: 0px;\n\n\t\t}\n\t\t50% {\n\t\t\topacity: 1;\n\t\t\tstroke-width: 1px;\n\t\t}\n\t\t100% {\n\t\t\topacity: 0.5;\n\t\t\tstroke-width: 0px;\n\t\t}\n\t}\n\n\t/* 渐变 */\n\t@keyframes gradient-color\n\t{\n\t\t0% {\n\t\t\tstroke: url(#grad1);\n\t\t}\n\t\t25% {\n\t\t\tstroke: url(#grad2);\n\t\t}\n\t\t50% {\n\t\t\tstroke: url(#grad3);\n\t\t}\n\t\t75% {\n\t\t\tstroke: url(#grad4);\n\t\t}\n\t\t100% {\n\t\t\tstroke: url(#grad1);\n\t\t}\n\t}\n\n\t/* 线条流动 */\n\t@keyframes dash {\n\t\tto {\n\t\t\tstroke-dashoffset: 1489.444580078125;\n\t\t}\n\t}\n\n\n\tsvg.main{\n\t\twidth: 700px;\n\t\theight: 700px;\n\t\tbackground-color: #000433;\n\t\t/*background-color: #21779b;*/\n\t\tborder-radius: 5px;\n\t}\n\n\n\t/* 顺时针转动 */\n\t.rotate-clockwise\n\t{\n\t\ttransform-origin: 349.533px 349.859px;\n\t\tanimation: 30s linear rotate-clockwise infinite;\n\n\t}\n\t/* 逆时针转动 */\n\t.rotate-anticlockwise\n\t{\n\t\ttransform-origin: 349.533px 349.859px;\n\t\tanimation: 30s linear rotate-clockwise infinite reverse;\n\t}\n\t/* 主圆 */\n\t.circle-main {\n\t\tfill: #031850;\n\t\tstroke: #ffae01;\n\t\tstroke-linejoin: round;\n\t\tstroke-width: 1px;\n\t\tfilter: url(#filter-circle-main);\n\t\tfill-opacity: 0;\n\t}\n\t/* 转动的三段弧形 */\n\t.three-arc{\n\t\tstroke: #ffae01;\n\t    stroke-width: 6px;\n\t    fill: none;\n\t    fill-rule: evenodd;\n\t}\n\t/* 大小三角形 */\n\t.triangle{\n\t\tstroke-width: 12px;\n\t\tfill: none;\n\t\tfill-rule: evenodd;\n\n\t\tstroke: url(#triangle-radial);\n\t}\n\t/* 流动的线条 */\n\t.fluid-line {\n\t\tstroke: #06a4ff;\n\t\tstroke-width: 2px;\n\t\tfill: none;\n\t\tfill-rule: evenodd;\n\n\t\t/* 流动效果 */\n\t\tstroke-dasharray: 150, 600;\n\t\tanimation: dash 10s linear infinite;\n\n\t\t/* 放大 */\n\t\ttransform-origin: 349.533px 349.859px;\n\t\ttransform: translate(132px, 182.1px) scale(1.03, 1.03);\n\t\t-webkit-transform: translate(132px, 182.1px) scale(1.03, 1.03);\n\t}\n\t/* 发光的点 */\n\t.shining-points {\n\t\tfill: #06a4ff;\n\t\tfill-rule: evenodd;\n\t\tanimation: 1s linear flicker infinite;\n\t\tstroke: #06a4ff;\n\t}\n\t/* 多边形 */\n\t.polygon{\n\t\tstroke: #06a4ff;\n\t\tstroke-width: 1px;\n\t\tfill: none;\n\t\topacity: 0.3;\n\t\tfill-rule: evenodd;\n\t}\n\n\t/* 柱形图动效 */\n\n\t@keyframes bar-running {\n\t    0%   { x: 0px;  }\n\t    20% { x: 200px; }\n\t    100% { x: 200px; }\n\t}\n\t.bar-lines .act{\n\t    animation: 5s linear bar-running infinite;\n\t}\n\t@keyframes bar-fadding {\n\t    0% { opacity: 0; }\n\t    20% { opacity: 1; }\n\t    100% { opacity: 1; }\n\t}\n\t.bar-wrapper{ animation: 5s linear bar-fadding infinite; }\n\n\t.bar-grey{\n\t\tfill: #B8B8B8;\n\t\topacity: 0.9;\n\t\twidth: 240px;\n\t\theight: 14px;\n\t}\n\t.the-line{\n\t\theight: 14px;\n\t\tfill: #FFD819;\n\t\topacity: 0.9;\n\t}\n\n\t.running-text{\n\t\twidth: 200px;\n\t    padding: 2px;\n\t    color: #21779b;\n\t    overflow: hidden;\n\t\tborder-radius: 5px;\n\t    white-space: nowrap;\n\t\tborder: 1px solid #999;\n\t    margin: 10px auto 30px;\n\t    animation: 7s linear running-text infinite;\n\t}\n\n\t@keyframes running-text\n\t\t{\n\t\t    0% {\n\t\t        text-indent: -200px;\n\t\t    }\n\t\t    100% {\n\t\t        text-indent: 200px;\n\t\t    }\n\t\t}\n\n</style>\n\n<p>回想一下，好像一直以来没怎么真正去做过什么 CSS 动画效果。这次通过几个动效，学习学习。</p>\n\n<h2>几个动画效果：</h2>\n<ul class=\"outline\">\n\t<li>1. 绕圆心旋转</li>​\n\t<li>2. 亮点呼吸</li>​\n\t<li>3. 线条流动</li>​\n\t<li>4. 渐变色流动</li>​\n\t<li>5. 文字超长后滚动</li>​\n\t<li>6. 柱状图增长式更新</li>​\n</ul>\n\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"xMidYMid\" viewBox=\"0 0 700 700\" class=\"main\">\n\n\t<!-- 正圆形 -->\n\t<circle cx=\"349.533\" cy=\"349.859\" r=\"299.908\" class=\"circle-main\"/>\n\n\t<!-- 三段弧线 -->\n\t<g class=\"rotate-clockwise\" width=\"700\" height=\"700\" viewBox=\"0 0 700 700\">\n\t\t<path d=\"M198.842,19.693 C229.791,8.887 263.053,3.013 297.685,3.013 C331.674,3.013 364.342,8.671 394.801,19.096 M592.325,359.365 C579.536,426.823 544.181,486.289 494.414,529.603 M100.428,529.142 C50.893,485.827 15.725,426.476 3.011,359.180 \"\n\t\ttransform=\"translate(52,48)\"\n\t\tclass=\"three-arc\">\n\t\t</path>\n\t</g>\n\n\t<g>\n\t\t<!-- 流动线条 -->\n\t\t<path d=\"M-14.161,321.501 C-19.210,321.501 -23.309,319.416 -25.405,315.785 C-27.501,312.153 -27.254,307.562 -24.726,303.189 L210.423,-103.623 C212.949,-107.993 216.804,-110.500 220.999,-110.500 C225.195,-110.500 229.050,-107.993 231.574,-103.622 L466.725,303.187 C469.252,307.562 469.500,312.153 467.404,315.785 C465.307,319.416 461.208,321.501 456.159,321.501 L-14.161,321.501 Z\" class=\"fluid-line\"/>\n\n\t\t<!-- <path d=\"M114.511,201.597 C117.651,206.997 122.787,206.997 125.927,201.597 L235.079,13.820 C238.218,8.419 235.682,4.001 229.442,4.001 L10.996,4.001 C4.756,4.001 2.220,8.419 5.359,13.820 L114.511,201.597 Z\" transform=\"translate(229.78 278.17)\"  class=\"triangle\"/> -->\n\n        <path d=\"M258.827,25.723 C261.947,20.327 267.052,20.327 270.172,25.723 L505.380,432.518 C508.500,437.914 505.952,442.328 499.718,442.328 L29.281,442.328 C23.047,442.328 20.499,437.914 23.619,432.518 L258.827,25.723 Z\" transform=\"translate(85 50)\" class=\"triangle\"/ >\n\t</g>\n\n\t<g class=\"rotate-anticlockwise\" width=\"700\" height=\"700\" viewBox=\"0 0 700 700\">\n\t\t<!-- 16个点 -->\n\t\t <path d=\"M660.840,333.447 C659.736,333.447 658.840,332.551 658.840,331.447 C658.840,330.342 659.736,329.447 660.840,329.447 C661.945,329.447 662.840,330.342 662.840,331.447 C662.840,332.551 661.945,333.447 660.840,333.447 ZM636.538,207.227 C635.518,207.650 634.348,207.166 633.925,206.145 C633.502,205.125 633.987,203.955 635.007,203.532 C636.028,203.109 637.198,203.594 637.621,204.614 C638.043,205.635 637.559,206.805 636.538,207.227 ZM636.521,455.662 C637.542,456.085 638.026,457.255 637.604,458.276 C637.181,459.296 636.011,459.781 634.991,459.358 C633.970,458.935 633.485,457.765 633.908,456.745 C634.331,455.724 635.501,455.240 636.521,455.662 ZM562.956,99.916 C562.174,99.135 562.174,97.869 562.956,97.088 C563.737,96.307 565.003,96.307 565.784,97.088 C566.565,97.869 566.565,99.135 565.784,99.916 C565.003,100.697 563.737,100.697 562.956,99.916 ZM565.753,562.964 C566.534,563.745 566.534,565.012 565.753,565.793 C564.972,566.574 563.705,566.574 562.924,565.793 C562.143,565.012 562.143,563.745 562.924,562.964 C563.705,562.183 564.972,562.183 565.753,562.964 ZM456.736,28.932 C455.716,28.509 455.231,27.340 455.654,26.319 C456.077,25.299 457.246,24.814 458.267,25.237 C459.287,25.659 459.772,26.829 459.349,27.850 C458.927,28.870 457.757,29.355 456.736,28.932 ZM456.695,633.934 C457.716,633.511 458.886,633.996 459.308,635.016 C459.731,636.037 459.246,637.207 458.226,637.629 C457.205,638.052 456.036,637.567 455.613,636.547 C455.190,635.526 455.675,634.356 456.695,633.934 ZM331.438,4.000 C330.333,4.000 329.438,3.105 329.438,2.000 C329.438,0.895 330.333,-0.000 331.438,-0.000 C332.543,-0.000 333.438,0.895 333.438,2.000 C333.438,3.105 332.543,4.000 331.438,4.000 ZM331.394,658.849 C332.498,658.849 333.394,659.744 333.394,660.849 C333.394,661.953 332.498,662.849 331.394,662.849 C330.289,662.849 329.394,661.953 329.394,660.849 C329.394,659.744 330.289,658.849 331.394,658.849 ZM206.136,28.915 C205.116,29.338 203.946,28.853 203.523,27.833 C203.101,26.812 203.585,25.642 204.606,25.220 C205.626,24.797 206.796,25.282 207.219,26.302 C207.642,27.323 207.157,28.492 206.136,28.915 ZM206.095,633.917 C207.116,634.339 207.600,635.509 207.178,636.530 C206.755,637.550 205.585,638.035 204.565,637.612 C203.544,637.190 203.059,636.020 203.482,634.999 C203.905,633.979 205.075,633.494 206.095,633.917 ZM97.079,99.885 C96.298,99.104 96.298,97.837 97.079,97.056 C97.860,96.275 99.126,96.275 99.907,97.056 C100.689,97.837 100.689,99.104 99.907,99.885 C99.126,100.666 97.860,100.666 97.079,99.885 ZM99.876,562.933 C100.657,563.714 100.657,564.980 99.876,565.761 C99.095,566.542 97.829,566.542 97.048,565.761 C96.267,564.980 96.267,563.714 97.048,562.933 C97.829,562.152 99.095,562.152 99.876,562.933 ZM26.310,207.186 C25.290,206.764 24.805,205.594 25.228,204.573 C25.651,203.553 26.821,203.068 27.841,203.491 C28.862,203.914 29.346,205.084 28.924,206.104 C28.501,207.125 27.331,207.609 26.310,207.186 ZM26.293,455.621 C27.314,455.199 28.484,455.683 28.907,456.704 C29.329,457.724 28.845,458.894 27.824,459.317 C26.804,459.740 25.634,459.255 25.211,458.235 C24.788,457.214 25.273,456.044 26.293,455.621 ZM1.991,333.402 C0.887,333.402 -0.009,332.507 -0.009,331.402 C-0.009,330.298 0.887,329.402 1.991,329.402 C3.096,329.402 3.991,330.298 3.991,331.402 C3.991,332.507 3.096,333.402 1.991,333.402 Z\"\n\t\t transform=\"translate(18.58 18.58)\"\n\t\t class=\"shining-points\"/>\n\n\t\t<!-- 16边形 -->\n\t\t<path\n\t\t\td=\"M561.235,561.235 L454.670,632.439 L328.969,657.442 L203.268,632.439 L96.703,561.235 L25.499,454.670 L0.496,328.969 L25.499,203.268 L96.703,96.703 L203.268,25.499 L328.969,0.496 L454.670,25.499 L561.235,96.703 L632.439,203.268 L657.442,328.969 L632.439,454.670 L561.235,561.235 Z\"\n\t\t\ttransform=\"translate(21.03 21.03)\"\n\t\t\tclass=\"polygon\"/>\n\n\t\t<!-- 八边形奇数 -->\n\t\t<path\n\t\t\td=\"M565.548,565.548 L331.500,662.494 L97.452,565.548 L0.506,331.500 L97.452,97.452 L331.500,0.506 L565.548,97.452 L662.494,331.500 L565.548,565.548 Z\"\n\t\t\ttransform=\"translate(18.5 18.5)\"\n\t\t\tclass=\"polygon\"/>\n\n\t\t<!-- 八边形偶数 -->\n\t\t<path\n\t\t\td=\"M432.978,612.110 L179.646,612.110 L0.514,432.978 L0.514,179.646 L179.646,0.514 L432.978,0.514 L612.110,179.646 L612.110,432.978 L432.978,612.110 Z\"\n\t\t\ttransform=\"translate(43.69 43.69)\"\n\t\t\tclass=\"polygon\"/>\n\t</g>\n\n\t<!-- 正圆发光 -->\n\t<filter id=\"filter-circle-main\" filterUnits=\"userSpaceOnUse\">\n\t\t<feGaussianBlur stdDeviation=\"6\" in=\"SourceAlpha\"/>\n\t\t<feComposite/>\n\t\t<feComposite/>\n\t\t<feComposite result=\"outerGlowBlur\"/>\n\t\t<feFlood flood-color=\"#0173ff\" flood-opacity=\"0.22\"/>\n\t\t<feComposite operator=\"in\" in2=\"outerGlowBlur\"/>\n\t\t<feBlend mode=\"screen\" in2=\"SourceGraphic\" result=\"outerGlow\"/>\n\t\t<feComposite in=\"SourceGraphic\" result=\"shadowed\"/>\n\t\t<feGaussianBlur stdDeviation=\"9\" in=\"SourceAlpha\" result=\"innerGlowBlur\"/>\n\t\t<feFlood flood-color=\"#0173ff\" flood-opacity=\"0.22\"/>\n\t\t<feComposite operator=\"out\" in2=\"innerGlowBlur\"/>\n\t\t<feComposite operator=\"in\" in2=\"SourceAlpha\"/>\n\t\t<feBlend mode=\"screen\" in2=\"shadowed\" result=\"innerGlow\"/>\n\t</filter>\n\n\n\t<!-- 三角形渐变 -->\n\t<radialGradient\n\t\tid=\"triangle-radial\"\n\t\tcx=\"0%\"\n\t\tcy=\"90%\"\n\t\tr=\"50%\">\n\n\t\t<!-- 逆时针移动 -->\n\t\t<animate\n\t\t\tattributeName=\"cx\"\n\t\t\tvalues=\"0%;100%;50%;0%\"\n\t\t\tdur=\"4s\"\n\t\t\trepeatCount=\"indefinite\" />\n\n\t\t<animate\n\t\t\tattributeName=\"cy\"\n\t\t\tvalues=\"90%;90%;20%;90%\"\n\t\t\tdur=\"4s\"\n\t\t\trepeatCount=\"indefinite\" />\n\t\t<stop stop-color=\"yellow\" offset=\"0\">\n\t\t\t<!-- <animate\n\t\t\t\tattributeName=\"stop-color\"\n\t\t\t\tvalues=\"#e5a212;yellow;#e5a212;\"\n\t\t\t\tdur=\"4s\"\n\t\t\t\trepeatCount=\"indefinite\" /> -->\n\t\t</stop>\n\t\t<stop stop-color=\"#e5a212\" offset=\"100%\"/>\n\t</radialGradient>\n</svg>\n\n<div style=\"text-align: right; color: #999\">Design by 玉木</div>\n\n<div class=\"detail mt10\">\n\t<h4>1. 旋转</h4>\n\t<div>\n\t\t<p><i>transform</i> 属性：从 <i>none</i>  到 <i>rotate(360deg)</i>;</p>\n\t\t<p>注意旋转中心点的设置；</p>\n\t</div>\n\n\t<h4>2. 亮点呼吸</h4>\n\t<div>\n\t\t<p><i>opacity</i> 属性：从 0.5  到 1;</p>\n\t\t<p><i>stroke-width</i> 属性：从 <i>0px</i>  到 <i>1px</i>;</p>\n\t</div>\n\n\t<h4>3. 线条流动</h4>\n\t<div>\n\t\t<p>利用 <i>SVG</i> 结点的 <i>stroke</i> 属性： </p>\n\n\t\t{% highlight css %}\n@keyframes dash {\n    to {\n        // 等于总的路径长度，使得动画平滑过渡\n        stroke-dashoffset: 1489.444580078125;\n    }\n}\n.fluid-line {\n    // dash 的长度， dash 之间的间隔\n    stroke-dasharray: 150, 600;\n    animation: dash 10s linear infinite;\n}\n\t\t{% endhighlight %}\n\t</div>\n\n\t<h4>4. 渐变色流动</h4>\n\t<div>\n\n\t\t<p>- 填充 <i>stroke: url(#triangle-radial)</i></p>\n\t\t<p>- 径向渐变</p>\n\t\t<p>- 沿着三角形三个顶点移动</p>\n\n\t\t{% highlight html %}\n<radialGradient\n\tid=\"triangle-radial\"\n\tcx=\"0%\"\n\tcy=\"90%\"\n\tr=\"50%\">\n\n\t<animate\n\t\tattributeName=\"cx\"\n\t\tvalues=\"0%;100%;50%;0%\"\n\t\tdur=\"4s\"\n\t\trepeatCount=\"indefinite\" />\n\n\t<animate\n\t\tattributeName=\"cy\"\n\t\tvalues=\"90%;90%;20%;90%\"\n\t\tdur=\"4s\"\n\t\trepeatCount=\"indefinite\" />\n\t<stop stop-color=\"yellow\" offset=\"0\" />\n\t<stop stop-color=\"#e5a212\" offset=\"100%\"/>\n\n</radialGradient>\n\t\t{% endhighlight %}\n\n\t</div>\n\n\n\t<h4>5. 文字超长后滚动</h4>\n\t<div>\n\n\t\t<div>\n\t\t\t<div class=\"running-text\">\n\t\t\t\t身健在，且加餐。舞裙歌板尽情欢。\n\t\t\t</div>\n\t\t</div>\n\n\t\t<p>变更 <i>text-indent</i></p>\n\n\t\t{% highlight css %}\n.running-text{\n\twidth: 200px;\n\toverflow: hidden;\n\twhite-space: nowrap;\n\tborder: 1px solid #999;\n\tanimation: 7s linear running-text infinite;\n}\n\n@keyframes running-text\n\t{\n\t    0% {\n\t        text-indent: -200px;\n\t    }\n\t    100% {\n\t        text-indent: 200px;\n\t    }\n\t}\n\t\t{% endhighlight %}\n\t</div>\n\n\n\t<h4>6. 柱状图增长式更新</h4>\n\t<div>\n\t\t<svg class=\"svg-bar\" width=\"700px\" height=\"230px\" viewBox=\"0 0 700 230\">\n\t\t\t<g class=\"bar-wrapper\">\n\t\t\t    <text font-size=\"21\" font-weight=\"500\" line-spacing=\"38\" fill=\"#000\">\n\t\t\t        <tspan x=\"150\" y=\"54\">广东</tspan>\n\t\t\t        <tspan x=\"150\" y=\"92\">浙江</tspan>\n\t\t\t        <tspan x=\"150\" y=\"130\">上海</tspan>\n\t\t\t        <tspan x=\"150\" y=\"168\">江苏</tspan>\n\t\t\t        <tspan x=\"150\" y=\"206\">北京</tspan>\n\t\t\t    </text>\n\n\t\t\t    <rect class=\"bar-grey\" x=\"200\" y=\"39\" ></rect>\n\t\t\t    <rect class=\"bar-grey\" x=\"200\" y=\"78\" ></rect>\n\t\t\t    <rect class=\"bar-grey\" x=\"200\" y=\"117\" ></rect>\n\t\t\t    <rect class=\"bar-grey\" x=\"200\" y=\"156\" ></rect>\n\t\t\t    <rect class=\"bar-grey\" x=\"200\" y=\"195\" ></rect>\n\t\t\t</g>\n\t\t\t<clipPath id=\"clip-a\">\n\t\t\t\t<path d=\"M 200,40 L 440,40 L 440,220 L 200,220 Z\" clip-rule=\"evenodd\" />\n\t\t\t</clipPath>\n\n\t\t\t<g class=\"bar-lines\" clip-path=\"url(#clip-a)\">\n\t\t\t\t<rect class=\"the-line act\" x=\"200\" y=\"39\" width=\"240\"></rect>\n\t\t\t    <rect class=\"the-line act\" x=\"200\" y=\"78\" width=\"207\"></rect>\n\t\t\t    <rect class=\"the-line act\" x=\"200\" y=\"117\" width=\"181\"></rect>\n\t\t\t    <rect class=\"the-line act\" x=\"200\" y=\"155\" width=\"155\"></rect>\n\t\t\t    <rect class=\"the-line act\" x=\"200\" y=\"194\" width=\"112\"></rect>\n\t\t\t</g>\n\t\t</svg>\n\n\t\t{% highlight css %}\n// 变更 x 位置\n@keyframes running {\n    0%   { x: 894px;  }\n    3.3% { x: 1134px; }\n    100% { x: 1134px; }\n}\n.lines .act{\n    animation: 15s linear running infinite;\n}\n// 淡入效果\n@keyframes fadding {\n    0% { opacity: 0; }\n    3.3% { opacity: 1; }\n    100% { opacity: 1; }\n}\n.wrapper{ animation: 15s linear fadding infinite; }\n\t\t{% endhighlight %}\n\n\t\t计算公式 <i> x(占比) = speed(动画完成时长) / wait(间隔时间) * 100; </i>\n\n\t\t<div class=\"mt20\">SVG 遮罩  <i>clip-path=\"url(#clip)\"</i></div>\n\n\t\t{% highlight html %}\n\n<clipPath id=\"clip\">\n\t<path d=\"M 200,40 L 440,40 L 440,220 L 200,220 Z\"\n\t\tclip-rule=\"evenodd\" />\n</clipPath>\n\t\t{% endhighlight %}\n\t</div>\n</div>\n\n\n<h2>感想：</h2>\n\t<p>1. 其实基本上是从 PhotoShop 中导出 SVG 路径，当作 HTML 标签，加上适当的 CSS 动画。\n\t<p>2. 开发过程中，了解到一些 SVG 特有的属性和技巧，比如 SVG 遮罩和颜色渐变等。</p>\n\t<p>3. 动画还蛮好玩的，虽然没有深入研究其原理核心，但看着最后成功实现了视觉稿的效果，也是蛮有成就感的。</p>\n","id":13},{"layout":"post","title":"d3.js 基础 － 一个数据可视化相关的 javascript 库","date":"2016-04-07","categories":"d3","tag":"学习笔记, 数据可视化","desc":"本文谈谈 d3 中的数据绑定、scale、坐标轴。","imgUrl":"data/post_imgs/d3/d3.png","filename":"2016-04-07-d3基础.md","content":"\n\n### 一、d3.js 介绍\n\n#### 1. d3 是什么？\n\nd3.js 是一个用于制作数据可视化相关的 javascript 工具库，你可以在 [d3.js 官网](https://d3js.org/) 中找到数之不尽的、使用 d3 绘制的精美数据可视化图像。\n\nd3.js 是基于 svg 的函数库，（其实也支持 canvas，但 api 不够丰富）\n\n#### 2. 为什么要使用 d3 ？\n\n若你的项目是数据相关的，且需要大量定制化的图表时，d3.js 会是一个很好的选择。\n\n曾使用过 [highchart.js](http://www.highcharts.com/) , [echart.js(百度)](http://echarts.baidu.com/)，这两者都是很好的图表库，可满足于常见的通用图表，如柱状图、饼图、折线图、地图等等。但无论是 highchart 还是 echart，这类图表库能提供的图表毕竟是有限的，即便它们提供的图表越来越丰富（如也涵盖了许多高级复杂图表）、灵活性（可配置项）越来越高，但无法随心所欲，绘制出你天马星空的所思所想。\n\n\n#### 3. 一个标准、常见的 `d3.js` 操作流程如下：\n\n{% highlight javascript %}\n\nd3.select(\".chart\")\n\t// 若 .chart 下没有任何 div, 返回空数组\n\t.selectAll(\"div\")\n\n\t// 数据绑定\n\t.data(data)\n\n\t// 此刻返回的是一系列占位符\n\t.enter()\n\n\t// 插入 DOM 结点\n\t.append(\"div\")\n\n\t// 设置样式\n\t.style(\"width\", function(d) { return d * 10 + \"px\"; })\n\n\t// 插入文字\n\t.text(function(d) { return d; });\n\n{% endhighlight %}\n\n其核心包括：选择器，数据绑定，DOM 操作，样式与文字；\n\n### 二、选择器\n\n- d3 与 css3 选择器保持一致，如支持标签 `\"div\"`, 类名 `\".awesome\"`, id `\"#foo\"`, 属性 `\"[color=red]\"`, 层级 `\"parent child\"`等等；\n- `select()` 和 `selectAll()`，单选和多选区别。\n\n\n### 三、数据绑定\n\nd3 在处理数据方面，有三种状态，enter(), exit() 和 update。\n\n- enter() － 处理新加入的数据\n- exit() － 处理已废弃的数据\n- update - 更新数据 （内部操作）\n\n##### 缺省状态下，d3 根据序号（index）来进行数据绑定\n\n![data join](/data/post_imgs/d3/data-join.png)\n\n将 elements 与数据集(datas)，一对对拿出来看：(elements 对应于 d3 渲染在页面上的 dom 结点。)\n\n- 如果 elements 内部属性 __data__ 中存的值不等于 data，则 update();\n- 如果 datas 的长度大于 elements 长度，多余的那些 data 都属于 enter 范畴；\n- 如果 datas 的长度小于 elements 长度，多余的那些 elements 都属于 exit 范畴；\n\n##### 指定了参照值的情况下：（即在调用 .data() 绑定数据时，再传入 key function 指定特定的 key ）\n\nelements 内部属性 __data__ 中存的值与实际 data 对比，若：\n\n- 相等， update()\n- 不相等，原值放入 exit(); 新增放入 enter();\n\n![data join](/data/post_imgs/d3/constancy.png)\n\n与顺序无关\n\n![data join](/data/post_imgs/d3/order.png)\n\n### 四、缩放 scale (或者翻译成 “比例尺”)\n\n作用：将数据集与我们希望的视图大小映射起来，如 `datas =[1,2,3]`,也许我们希望展现在屏幕中的是 `[100px, 200px, 300px]`;\n\n- domain() data space － 设置输入域，相当于数学中的 “定义域”\n- range() display space - 设置输出范围，相当于数学中的 “值域”\n\n#### 1. 连续的 － 如 [0, 100]\n\n- 最常用的是线性缩放 `linear()`，既 `y = mx+b`。 其中 m 与 b 通过 domain 和 range 计算可得；\n- 除此之外的函数还有 `pow()`, `sqrt()`, `log()` 等。\n\n#### 2. 离散的 － 即定义域和值域并非是连续变化的。如 ['A', 'B', 'C', 'D']\n\n- `ordinal()` 序数缩放\n\n好玩之处\n\n- `.range(\"green\", 'blue')` 出现从绿到蓝的渐变颜色值；\n- `.clamp(true)` 限定界限，越出后即截取掉。\n\n### 五、坐标轴\n\n由 `<g>, <line>, <text>` 组成\n\n- d3.svg.axis()\n- scale()：指定缩放。\n- orient()：指定刻度的朝向，如 'top', left' 等\n- ticks()：指定刻度的数量。\n- call()：将当前的选择集作为参数传递给此函数\n\n\n### 六、资料\n\n官网学习资料好齐全，讲解的也很赞。下面几篇基本都是从官网上找到链接的。\n\n- [Let’s Make a Bar Chart, Parts I](http://bost.ocks.org/mike/bar/), [Parts II](http://bost.ocks.org/mike/bar/2/), [Parts III](http://bost.ocks.org/mike/bar/3/)\n- [Thinking with Joins](https://bost.ocks.org/mike/join/)\n- [Video: Introduction to D3 - Curran Kelleher, Bay Area D3 Meetup, April 2015](https://www.youtube.com/watch?v=8jvoTV54nXw)\n- [Video: Beautiful Data with D3 - Andrew Burgess - 20 Jan 2014 - tuts+](https://code.tutsplus.com/courses/beautiful-data-with-d3)","id":14},{"layout":"post","title":"d3.js 进阶","date":"2016-04-14","categories":"d3","tag":"学习笔记, 数据可视化, 动画","desc":"本篇文章谈谈 d3 的动画、svg 图形生成器以及 d3 提供的 layout","imgUrl":"data/post_imgs/d3/散点图-动画.png","filename":"2016-04-14-d3进阶.md","content":"\n\n一、动画\n==============\n\n#### 1. 鼠标 hover ，显示当前坐标\n\n- 使用 .on() 为图表添加交互\n- 当前 this 指向的 d3 对象：`d3.select(this)`\n- 事件对象：`d3.event`\n- 常用事件 'mouseover', 'mouseout'\n\n#### 2. 为图表添加动画\n\n![为散点图添加动画](/data/post_imgs/d3/散点图-动画.png)\n\n代码如下：\n\n{% highlight javascript %}\ncircles.transition()\n\n\t// 为每个结点按序增加延迟时间，达成依次出现的效果\n\t.delay(function(d, i){\n\t\treturn i * 10;\n\t})\n\n\t// 动画总时长\n\t.duration(100)\n\n\t// 更新样式\n\t.attr(circleAttrs);\n{% endhighlight %}\n\n更新样式：\n\n1. 坐标 从原点移至 x, y\n2. 半径 从小变大\n\n#### 3. 新增结点，动态更新比例尺\n\n![动态更新比例尺](/data/post_imgs/d3/散点图-animate2.png)\n\n- 返回当前鼠标坐标：`var coods = d3.mouse(this);`\n- 反向获取比例尺的值：`xScale.invert()`\n- 更新 data 数组 `data.push(obj)`;\n- 更新比例尺的 `domain 区间`\n- 更新坐标轴 重新 `.call(xAxis)`\n\n二、Layout\n==============\n\n什么是 layout?\n\nlayout 的作用是将数据转成适合绘图的结构，d3 提供了多种 layout, 如：Pie, Tree, Force, Partition, Cluster, Bundle 等等。[更多介绍...](http://chimera.labs.oreilly.com/books/1230000000345/ch11.html)\n\n下面以绘制树形图为例：\n\n{% highlight javascript %}\nvar tree = d3.layout.tree().size([degree, radius]);\n\n// 得到结点数据\nvar nodeData = tree.nodes(data);\n\n// 得到连线数据\nvar linkData = tree.links(nodeData);\n{% endhighlight %}\n\n\n#### 1. 数据转换\n\n\n![console出来的数据结构](/data/post_imgs/d3/tree-console出来的数据格式.png)\n\n`parent` 和 `children` 指针，联系着各个对象。\n\n\n![对象关系图](/data/post_imgs/d3/tree-layout.png)\n\n#### 2. 生成曲线\n\n{% highlight javascript %}\nvar diagonal = d3.svg.diagonal.radial()\n\t// 点变换器\n\t.projection(function(d){\n\t\treturn [d.y, d.x/180* Math.PI];\n\t});\n\n{% endhighlight %}\n\n设置结点之间连线的形式，`d3.svg.diagonal.radial()` 调用径向对角线生成器。\n\n对角线生成器：输入两个顶点坐标，生成一条贝塞尔曲线。\n\n#### 3. 移动\n\n由于绘制后的树形图是以左上角为原点，向上展开的。故定位时需要做旋转。\n\n![移动过程](/data/post_imgs/d3/tree-位移过程.png)\n\n`translate()`， `rotate()`\n\n1. 初始化时，位于左上角；\n2. 整体 y 轴向下移动；\n3. 结点右移，注意到此时叶子结点是重合的（即 “曹丕”、“曹植”）；\n4. 整体顺时针旋转；\n5. 结点逆时针旋转，回到水平线。\n\n### 补充：\n\n其中 `.size([degree, radius]` 设定范围，通过设置树形开口的角度以及延伸半径长度。\n\na. 角度\n\n![角度不同](/data/post_imgs/d3/角度不同.png)\n\nb. 半径\n\n![半径不同](/data/post_imgs/d3/半径不同.png)\n\n\nc. 为啥要叫 “半径”？设置角度为 360 度后，便一目了然了\n\n![半径不同](/data/post_imgs/d3/tree-360-250.png)\n\n\n三、图形生成器\n=========================\n\n图形生成器是 d3 提供的一个非常好用的功能，通过输入数据，生成绘制 SVG 图形所需要的格式。\n\n如以折线举例：\n\n![折线图](/data/post_imgs/d3/折线图.png)\n\n图中 7 个点数据如下：\n\n![折线图数据映射](/data/post_imgs/d3/折线图数据映射.png)\n\n使用 d3 提供的 line 生成器，`d3.svg.line()`, 便可把数据整合成绘制 path 所要的格式了，即添加 M, L, Z 等。\n\n{% highlight html %}\n<path\n\td=\"M0,500 L125,500 L250,500 L375,500 L500,500 L625,500 L750,500 L750,0 L625,125 L500,187.5 L375,237.5 L250,262.5 L125,312.5 L0,375Z\" >\n</path>\n{% endhighlight %}\n\n常用图形生成器有：\n\n{% highlight javascript %}\n\n// 折线\n\nd3.svg.line()\n\t.x()\n\t.y()\n\n// 区域\n\nd3.svg.area()\n\t.x0()\n\t.x1()\n\t.y0()\n\t.y1()\n\n// 坐标轴\n\nd3.svg.axis()\n\t.scale()\n\t.orient()\n\t.ticks()\n\n// 弧形\n\nd3.svg.arc()\n\t.innerRadius()\n\t.outerRadius()\n\n{% endhighlight %}\n\n四、其他\n=========================\n\n### 发现的一些技巧\n\n- 使用 tickSize(-config.height) 来绘制分割细线;\n- `shape-rendering: crispEdges;` 使得数轴和刻度线精确到像素级\n- 一种简化写法\n\t- '(' + [margin.left, margin.top] + ')' 强制类型转换时，自动会转成 '( margin.left, margin.top )' 形式；\n- 最佳实践: 设置属性应当与设置动画分离开来\n\n\n五、资料\n=========================\n\n- [OUR D3.JS 集群图的制作](http://www.ourd3js.com/wordpress/?p=245)\n- [Chapter 11. Layouts](http://chimera.labs.oreilly.com/books/1230000000345/ch11.html)\n- [video: tuts+ - Beautiful Data with D3- 3.3](https://code.tutsplus.com/courses/beautiful-data-with-d3/lessons/d3s-color-functions)","id":15},{"layout":"post","title":"地图与飞线","date":"2016-04-21","categories":"d3","tag":"学习笔记, 数据可视化, 动画","desc":"使用 d3.js 绘制地图和飞线动效。涉及内容：GeoJSON、地图投影、贝塞尔曲线、中间帧动画、蒙板等","imgUrl":"data/post_imgs/d3/flyline/效果图.gif","filename":"2016-04-21-d3地图与飞线.md","content":"\n\n<style>\n\t.outline{\n\t\tposition: fixed;\n\t\ttop: 110px;\n\t\tright: 20px;\n\t\tbackground-color: rgba(0,0,0,0.1);\n\t\tborder-radius: 5px;\n\t\tpadding: 10px;\n\t\tborder: 1px solid rgba(255,255,255,0.5);\n\t\t/*box-shadow: 0px 0px 7px rgba(0,0,0,0.1);*/\n\t}\n\t.outline li a{\n\t\ttext-decoration: none;\n\t\tcolor: #21779b;\n\t}\n\t.outline li{\n\t\tlist-style: none;\n\t}\n</style>\n\n<h1 id=\"t1\">一、绘制地图</h1>\n\n以绘制海南省为例：\n\n\n![海南省](/data/post_imgs/d3/flyline/海南省.png)\n\n#### 1. 拿到原始数据，比如构成海南省边界的一系列经纬点。\n\n#### 2. 转成适合 d3 识别的格式，如 [GeoJSON](http://geojson.org/)\n\n- GeoJSON 是一种专门用于描述地理数据且基于 JSON 的公开标准。\n- 如海南省边界 GeoJSON 格式如下:\n\n![GeoJSON格式](/data/post_imgs/d3/flyline/海南省数据.png)\n\n#### 3. 将经纬度地理坐标（三维）转换成平面直角坐标（二维），即 “地图投影”。\n\n**为什么称之为 “投影”?**\n\n以圆柱投影为例，假想球中心有一处光源，球体的影子印在圆柱上，再把圆柱展开。\n\n![圆柱投影法](/data/post_imgs/d3/flyline/圆柱投影.png)\n\n[图片来源自 wikipedia](https://zh.wikipedia.org/wiki/%E9%BA%A5%E5%8D%A1%E6%89%98%E6%8A%95%E5%BD%B1%E6%B3%95)\n\nd3 中内置了多种地球[投影函数](https://github.com/mbostock/d3/wiki/Geo-Projections)，如 `d3.geo.mercator()`等，调用非常方便。\n\n#### 4. 生成 SVG 路径\n\n调用 d3 中的路径生成器 —— `d3.geo.path()` ，生成 SVG 路径。\n\n{% highlight javascript %}\n\n// mercator 投影法，即正轴等角圆柱投影\nvar projection = d3.geo.mercator()\n\n// 调用路径生成器，加入投影函数，生成路径。\nd3.geo.path().projection(projection);\n\n{% endhighlight %}\n\n最后将生成的 SVG 路径数值，放入`<path>`的 `d`属性中，即可渲染出海南省\n\n\n{% highlight html %}\n\n<path d=\"M1016.3165908260071,877.0020828012596L1016.7682629425233,878.4541870083519L1018.1190182452278,879.657674665422L1020.6713918274147,879.9425987991278L1021.8133553115683,885.0159656142133L1021.2168072186639,886.604367509897L1019.6572600974043,888.3863507038384L1018.7027831627181,888.1210805263548L1017.5821249651053,890.4022390262162L1016.5466879311009,890.6605304316585L1014.6405747770752,895.1029959335299L1014.1903230095061,897.3390762043034L1012.4858999118553,900.5456612724538L1012.5455547246386,902.4770156266966L1011.8083917196311,904.251242336848L1008.3256872046436,904.9648477276073L1006.1624902108458,906.8575129740502L1005.2776105490134,909.6023273911044L1002.8828961011761,909.1128379773108L1001.4881098764467,909.7482614499434L999.9285627377321,909.4975500969631L998.7269444582525,912.2707386591089L996.8208312867737,913.2240027380744L994.5851963222347,911.4637932711369L990.7133151839512,911.1571154411927L989.7446347249067,911.4847360484749L988.5060872681313,909.9997012838144L986.9195534470948,910.025891775339L983.3388445930832,907.8296269799064L981.5832887937775,907.4933903587646L981.5591428093464,903.5329747367365L980.40439614978,901.3944349544332L980.864590394872,899.8235323030736L980.1913432669389,896.4899343077275L981.02651057606,895.4811777242269L980.4782544869208,893.0774565320271L981.5719259673072,891.3381575865278L982.9042166988199,891.078418535463L985.8727535866233,888.8618187772439L987.1837390315939,887.2474817087502L989.6381082922107,886.351004192087L989.8184930620489,883.4614340271595L992.2075260966478,881.3048632571645L995.0226649143901,882.9314989438175L996.1049735857605,882.4135500915461L996.1049735857605,880.7541404207199L997.3037511673499,879.9781179011286L999.455585334679,879.6531398322504L1001.0023492805256,880.7541404207199L1002.3232771855689,880.1322809066637L1004.5986820252949,880.6400545755691L1005.9238709771737,880.2577212784149L1007.0999229232812,878.599357584266L1008.9151335179147,879.2351497824575L1011.0442420323056,878.3453043291311L1014.4885970559592,880.2274951763136L1014.2968494422012,878.3687446898831Z\"></path>\n\n{% endhighlight %}\n\n\n<h1 id=\"t2\">二、绘制飞线</h1>\n\n#### 1. 找到城市\n\n**原始数据**\n\n{% highlight javascript %}\n[{\n\t\"from\": {\n\t\t\"name\":\"拉萨\",\n\t\t\"coordinate\": [116.4551,40.2539]\n\t},\n\t\"to\": {\n\t\t\"name\":\"北京\",\n\t\t\"coordinate\": [91.1865,30.1465]\n\t}\n}]\n{% endhighlight %}\n\n**三维转二维坐标**\n\n与绘制地图时相似，使用 `projection()` ,把经纬度转为直角坐标。\n\n\n#### 2. 绘制路径\n\n二次贝塞尔曲线\n\n\n{% highlight html %}\n// 起始点为(50,50)，控制点在(50,100)，结束点为(100,100)\n<path d=\"M50,50 Q50,100 100,100\" />\n{% endhighlight %}\n\n![飞线_二次贝塞尔曲线](/data/post_imgs/d3/flyline/飞线.png)\n\n起始点拉萨坐标，结束点北京坐标，控制点由计算得出，如下：\n\n![控制点计算公式](/data/post_imgs/d3/flyline/求控制点坐标.png)\n\n\n<h1 id=\"t3\">三、飞线动画 </h1>\n\n#### 使用 `attrTween()`，插入中间帧函数，不断变更 `<path>` 中的 `d` 属性，呈现出线条在“一点点绘制出来”的效果。\n\n![飞线动画](/data/post_imgs/d3/flyline/飞线动画.png)\n\n{% highlight javascript %}\n// 过渡动画\nflyline.transition()\n\n\t// 动画时长\n\t.duration(1800)\n\n\t// 为属性 d ，设置中间帧过渡\n\t.attrTween('d', function(d){\n\n\t\tvar l = $path.getTotalLength();\n\n\t\treturn function(t){\n\n\t\t\tvar p = $path.getPointAtLength(t * l)\n\n\t\t\treturn '最终返回的值'\n\t\t}\n\t});\n{% endhighlight %}\n\n说明：\n\n1. $path 变量为完整的飞线路径，即最终效果的飞线；\n2. `getTotalLength()` 得出该 `<path>` 的总长度；\n3. 此时的 t，即是中间帧的时刻。值范围为[0, 1],总数量大概会有 100 帧左右（为何是 100 帧左右，而不是个确切的数？暂没搞懂..）\n4. `getPointAtLength()` 传入路径上距离，返回该点的 x,y 坐标\n\n\n#### 新的控制点如何确定？\n\n通过起始点和原控制点，求出新的控制点\n\n![新的控制点](/data/post_imgs/d3/flyline/新的控制点.gif)\n\n![计算公式](/data/post_imgs/d3/flyline/新的控制点计算公式.jpg)\n\n[图片来源 cnblogs](http://www.cnblogs.com/hnfxs/p/3148483.html)\n\n取 p01 为新的控制点。\n\n#### 通过新控制点和终点（变量），起始点不变，动态一次次绘制飞线。\n\n{% highlight javascript %}\nfunction valueTween(d){\n\n\tvar $path = d3.select(this.parentNode).select('.line-basic');\n\n \t// 基路径\n\tvar coord = $path.attr('d').replace(/(M|Q)/g, '').match(/((\\d|\\.)+)/g);\n\n    var x1 = +coord[0], y1 = +coord[1], // 起点\n\t\tx2 = +coord[2], y2 = +coord[3], // 控制点\n\t\tx3 = +coord[4], y3 = +coord[5]; // 终点\n\n\tvar l = $path.node().getTotalLength();\n\n\treturn function(t){\n\n\n\t\t// 新的终点\n\t\tvar p = $path.node().getPointAtLength(t * l);\n\n\t    // 新的控制点\n\t    var x = (1-t) * x1 + t * x2;\n\t    var y = (1-t) * y1 + t * y2;\n\n\t\treturn 'M'+x1+','+y1+' Q'+x+','+y+' '+p.x+','+p.y;\n\t}\n}\n{% endhighlight %}\n\n\n<h1 id=\"t4\"> 四、飞线样式  </h1>\n\n### 1. 使用 svg 蒙板，渲染飞线“头粗尾巴细”的效果\n\n#### (1) 添加圆形蒙板\n\n![蒙板](/data/post_imgs/d3/flyline/蒙板.png)\n\n- 圆心 cy,cx 为飞线终点；\n- 设置的半径即为可视区域；\n- 蒙板动态跟随飞线变化。\n\n\n#### (2) svg 中 `<mask>` 标签\n\n{% highlight html %}\n<defs>\n\t<mask id=\"Mask\">\n\t      <circle r=\"100\" fill=\"url(#grad)\"  />\n\t</mask>\n</defs>\n{% endhighlight %}\n\n#### (3) 为蒙板添加径向渐变，使得飞线有“头部深，尾部浅至透明”的效果\n\n{% highlight html %}\n<radialGradient\n\tid=\"grad\"\n\tcx=\"0.5\"\n\tcy=\"0.5\"\n\tr=\"0.5\" >\n\t<stop offset=\"0%\" stop-color=\"#fff\" stop-opacity='1' />\n\t<stop offset=\"100%\" stop-color=\"#fff\" stop-opacity='0'/>\n</radialGradient>\n{% endhighlight %}\n\n### 2. 为飞线添加一个亮色的头部\n\n![飞线头部](/data/post_imgs/d3/flyline/飞线头部亮色.png)\n\n### 3. 优化\n\n![蒙板不恰当](/data/post_imgs/d3/flyline/蒙板半径-before.png)\n\n原因是蒙板半径没有自适应。当半径为一个固定数值时，将导致长度小于此值的飞线没掉了尾部渐变效果。如下图，白色圆圈为蒙板范围：\n\n![蒙板1](/data/post_imgs/d3/flyline/mask-radius.png)\n\n优化：使蒙板半径随着两点（起点与终点）的距离而变化\n\n![蒙板2](/data/post_imgs/d3/flyline/mask-radius2.png)\n\n<h1 id=\"t5\">五、总结</h1>\n\n整个流程如下：\n\n1. 加载地图数据，绘制出地图；\n2. 轮询飞线数据，保存在数据中心；\n3. 飞线池 FlylinePond 初始化 生成飞线实体；\n4. 启动飞线数据运输带 － 不断绘制（只要数据池中有数据）\n5. draw() －已知起点和终点，二次贝塞尔曲线\n\t- 绘制飞线基本路线\n\t- 飞线动画，不断改变 d 属性； attrTween\n\t- 飞线头部\n\t- 蒙板\n\t- 结束圆圈\n\t- 终点文字\n\n#### 效果图：\n\n![效果图](/data/post_imgs/d3/flyline/效果图.gif)\n<h1 id=\"t6\">六、资料：</h1>\n\n1. [eChart(百度)－地图－模拟迁徙](http://echarts.baidu.com/demo.html#geo-lines)\n2. [贝塞尔曲线原理](http://www.cnblogs.com/hnfxs/p/3148483.html)\n3. [D3.js 入门系列 — 地图的制作](http://www.ourd3js.com/wordpress/?p=296)\n4. [Marker animation along SVG path element with D3.js](http://bl.ocks.org/KoGor/8162640 )\n5. [D3.js 官网 Tutorials](https://github.com/mbostock/d3/wiki/Tutorials)\n6. [wikipedia: 麥卡托投影法](https://zh.wikipedia.org/wiki/%E9%BA%A5%E5%8D%A1%E6%89%98%E6%8A%95%E5%BD%B1%E6%B3%95)\n\n\n<ul class=\"outline\">\n\t<li>\n\t\t<a href=\"#t1\">一、绘制地图</a>\n\t\t<ul>\n\t\t\t<li>1. 地理经纬点数据</li>\n\t\t\t<li>2. GeoJSON</li>\n\t\t\t<li>3. 地图投影</li>\n\t\t\t<li>4. 生成路径</li>\n\t\t</ul>\n\t</li>\n\t<li>\n\t\t<a href=\"#t2\">二、绘制飞线</a>\n\t\t<ul>\n\t\t\t<li>1. 找到城市</li>\n\t\t\t<li>2. 绘制路径</li>\n\t\t</ul>\n\t</li>\n\t<li>\n\t\t<a href=\"#t3\">三、飞线动画</a>\n\t\t<ul>\n\t\t\t<li>1. 飞线路径</li>\n\t\t\t<li>2. getTotalLength()</li>\n\t\t\t<li>3. 中间帧 </li>\n\t\t\t<li>4. getPointAtLength()</li>\n\t\t</ul>\n\t</li>\n\t<li>\n\t\t<a href=\"#t4\">四、飞线样式</a>\n\t\t<ul>\n\t\t\t<li>1. 蒙板</li>\n\t\t\t<li>2. 头部</li>\n\t\t\t<li>3. 优化</li>\n\t\t</ul>\n\t</li>\n\t<li>\n\t\t<a href=\"#t5\">五、总结</a>\n\t</li>\n\t<li>\n\t\t<a href=\"#t6\">六、资料</a>\n\t</li>\n</ul>","id":16},{"layout":"post","title":"用 Canvas 绘制飞线","date":"2016-05-12","categories":"canvas","tag":"学习笔记, 数据可视化, 动画","desc":"上一篇文章总结了地图与飞线的实现，使用的是 d3.js + svg，后发现可能存在性能隐患。这次来探讨一下用canvas如何绘制飞线。","imgUrl":"data/post_imgs/canvas/flyline/layer.png","filename":"2016-05-12-canvas飞线.md","content":"\n \n \n用 Canvas 绘制飞线\n===================\n \n#### 背景\n \n上一周完成了地图与飞线的实现，使用的是 d3.js + svg，后发现可能存在性能隐患。\n \n当飞线数量多的时候，页面上则有多个 svg `<path>` 结点，并且每条飞线有头部、结束圆圈、蒙板等效果，则页面上的结点数是 飞线数*其他部件数。将会是一个较大的值。\n \n \nCanvas 飞线动画\n======================\n \n![动画飞线](/data/post_imgs/canvas/flyline/canvas-flyline.gif)\n \n \n画布罩在整个 HTML 上，共两层 Canvas 画布，底层绘制世界地图，表层绘制飞线。\n \n![layer](/data/post_imgs/canvas/flyline/layer.png)\n \n \n#### 与 SVG 飞线 对比\n \n- SVG 飞线：\n    1. 一条飞线是一个 SVG `<path>` 结点；\n    2. 使用 d3.js 中   `.transition()` 下的子方法 `.attrTween()`，对于中间帧每一个状态，改变其 `<path>` 结点里的 `d` 属性；\n- Canvas 飞线：\n    1. 底下的地图绘制在一张画布中，而飞线绘制在另一张画布中；\n    2. 每一帧都重新清除掉飞线画布，重新绘制每一条飞线；\n \n#### 两者共同点：\n \n1. 通过不断计算飞线 p 点（起、终点之间的任一点）的位置，一次次绘制从起点到 p 的二次贝塞尔曲线；\n2. 飞线的起点不变，p 点坐标不断改变\n \n二次贝塞尔曲线公式\n \n![二次贝塞尔曲线公式](/data/post_imgs/canvas/flyline/二次贝塞尔曲线公式.png)\n \n（其中 起始点 p0, 控制点 p1, 终点 p2）\n \nt 从 0 变到 1，每个 t 的变化时，就绘制一帧；\n飞线的速度就取决于增量变化的大小，增量越小，动画就越细致。\n \n如何表现 t ？\n给每一个飞线对象单独一个 t 属性，每绘制完一帧，t = t + 增量(固定值)；\n \n \n \nrequestAnimationFrame 动画\n \n \n飞线取数设计\n======================\n \n- 总数据池: －不断轮询服务端，增加要绘制飞线的数据；\n- 飞线数据: 存放的是每一帧要绘制在页面上的飞线。 只要有值，就用 `requestAnimationFrame` 不断调用动画；\n \n \n飞线样式\n=======================\n \n与 SVG 飞线 相比:\n \n- SVG 飞线：\n    - 使用蒙板跟随飞线尾部的方式\n \n- Canvas 飞线\n \n    - 使用渐变填充色，对每一条飞线，都重新生成该飞线起点到 p 点的线性渐变；\n \n![渐变色](/data/post_imgs/canvas/flyline/渐变色.png)\n \n渐变消失: ctx.globalAlpha\n \n \n另一种飞线动画的实现方式\n========================\n使用 globalAlpha 和 临时 Canvas；\n \n但有两个弊端：\n \n1. 无法做停留：飞线飞完之后，想停留个几毫秒再消失\n2. 尾巴长度难控制，太长的话有明显的间隔。\n \n- [CANVAS绘制运动的轨迹效果  ](http://nikai.us/weblog/canvas-movecircle/)\n- [echarts(baidu)-地图－模拟迁徙](http://echarts.baidu.com/demo.html#geo-lines)\n \n \n \nCanvas 与 SVG 性能对比\n==================\n \n# 一、同等情况下，SVG 飞线与 Canvas飞线的性能比较。\n \n测试数据总数共 596 条， 单次同时绘制 50 条 飞线情况下：\n \n|        |动画帧数 fps       | cpu 占用率      | JS Heap 内存情况 | 说明| \n|------- |------------------|----------------| ----------------| ------------|\n| svg    | 12 fps ～ 43 fps | 高于 100%       | 11 mb 左右      | 视觉上仔细看略有卡顿| \n| canvas | 42 fps ～ 60 fps | 20% ～ 30% 浮动  | 9.3 mb 左右       | 动画流畅|\n \n \n具体如下：\n \n### 1. 动画帧数\n \n#### Canvas\n \n动画帧数保持在 42-60 左右，动画流畅；\n \n![fps-canvas](/data/post_imgs/canvas/performance/fps-canvas.png)\n![fps-chrome-canvas](/data/post_imgs/canvas/performance/fps-chrome-canvas.png)\n \n#### SVG\n \n动画帧数保持在 12-43 左右，视觉上仔细看略有卡顿；\n \n![fps-svg](/data/post_imgs/canvas/performance/fps-svg.png)\n![fps-chrome-svg](/data/post_imgs/canvas/performance/fps-chrome-svg.png)\n \n### 2. CPU 占用率\n \n#### Canvas\n \nCPU 占用率在 20%-30% 浮动\n \n![cpu-canvas](/data/post_imgs/canvas/performance/cpu-canvas.png)\n \n#### SVG\n \nCPU 占用率高于 100%\n \n![cpu-svg](/data/post_imgs/canvas/performance/cpu-svg.png)\n \n \n### 3. JS Heap 快照\n \n皆无内存泄漏问题。 SVG 飞线的 JS heap 总大小略高于 Canvas 飞线。\n \n#### Canvas\n \n![js heap](/data/post_imgs/canvas/performance/heap_snapshot_canvas.png)\n \n#### SVG\n \n![js heap](/data/post_imgs/canvas/performance/heap_snapshot_svg.png)\n \n \n# 二、Canvas飞线峰值测试\n \n![canvas飞线峰值测试](/data/post_imgs/canvas/performance/测试峰值.png)\n \n测试了 Canvas 飞线，在同时绘 50 条、100 条、200 条、300 条、400 条 时的动画流畅度。\n \n![峰值帧数](/data/post_imgs/canvas/performance/峰值帧数.png)\n \n- 在50-100 时候动画流畅\n- 200 时， fps 低，视觉上勉强可接受\n- 300 时，有卡顿，有明显漏帧行为；\n- 400 时，卡顿非常严重，几乎无法完整看到飞线动画\n \n \n参考资料：\n==============\n \n1. [HTML 5 Canvas 参考手册](http://www.w3school.com.cn/tags/html_ref_canvas.asp)\n2. [stackoverflow: I want to do animation of an object along a particular path](http://stackoverflow.com/questions/17083580/i-want-to-do-animation-of-an-object-along-a-particular-path)\n3. [paulirish:requestAnimationFrame for Smart Animating](http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/)","id":17},{"layout":"post","title":"Canvas 饼图与动效","date":"2016-06-24","categories":"canvas","tag":"学习笔记, 数据可视化, 动画","desc":"用 Canvas 绘制一个饼图且实现动效。涉及：canvas 基本 api, requestAnimationFrame, d3.js, Path2D等等。本文是一个思路总结，仍有很多待优化的地方。","imgUrl":"data/post_imgs/饼图动效/pie-animation.gif","filename":"2016-06-24-canvas绘制饼图动效.md","content":"\n \n \n前言\n=========================\n \n在 canvas 上绘制一个饼图，要求动效如下：\n \n![animation preview](/data/post_imgs/饼图动效/pie-animation.gif)\n \n \n#### canvas 动效的本质：不断绘制每一帧\n \n对动画帧节的控制：\n \n- 有一个总的 `requestAnimationFrame`(RAF)，\n- 使用 RAF 自提供的 t，来做动画的间隔控制\n \n \n------------------------------------------------\n \n \n开始绘制一个静态的饼图\n=========================\n \n使用 `d3.js` 来计算生成饼图路径。（ [d3是什么？](/d3/2016/04/07/d3基础.html) ）\n \n \n1. `d3.layout.pie()` 计算组成饼图的弧的开始和结束的角度\n \n    ![d3.layout.pie](/data/post_imgs/饼图动效/d3-layout-pie.png)\n \n2. `d3.svg.arc()` 传入内半径、外半径、开始弧度和结束弧等，生成环形路径数据。\n \n    ![单个环形](/data/post_imgs/饼图动效/pie1.png)\n \n    生成三段 svg 路径：\n \n \n    {% highlight html %}\n    M4.898587196589413e-15,-80A80,80 0 1,1 -3.06285495914156e-14,80L-2.4502839673132476e-14,64A64,64 0 1,0 3.91886975727153e-15,-64Z\n \n    M-3.06285495914156e-14,80A80,80 0 0,1 -56.568542494923825,56.568542494923776L-45.25483399593906,45.25483399593902A64,64 0 0,0 -2.4502839673132476e-14,64Z\n \n    M-56.568542494923825,56.568542494923776A80,80 0 0,1 -1.4695761589768237e-14,-80L-1.175660927181459e-14,-64A64,64 0 0,0 -45.25483399593906,45.25483399593902Z\n    {% endhighlight  %}\n \n \n3. `new Path2D()` 将 SVG 弧线 path 信息转为 canvas 上的路径命令\n \n静态的饼图就画好了。\n \n------------------------------------------------\n \n \n饼图动画\n=========================\n \n#### （一）内部 requestAnimationFrame\n \n记录下动画开始时刻，若超出 duration 后，即停止动画（停止调用 RAF）\n \n#### （二）Canvas 动画：每一帧都清空画布，重新绘制饼图中的每个环形；\n \n#### （三）任意时刻下的环形（即“半截”环形如何绘制）\n \n![半截环形](/data/post_imgs/饼图动效/pie2.png)\n \n`d3.interpolate(startAngle, endAngle)` 返回一个介于环形开始角度和结束角度之间的默认插值器；\n \n如以上青色环形的插值起始值为 `d3.interpolate(3.14159.., 3.92699...)`\n \n然后对区间 [0,1] 任意的参数 y，返回对应的补间值。\n \n根据新的结束角度，生成新的环形路径。\n \n每一帧中：实际上仅有一个扇形处于在变化之中（“半截”状态），在它之前的扇形通通绘制一个完整扇形，而在它之后的扇形不绘制。\n \n#### 如何求出当前处于“半截”状态的是哪一个组的？\n \n以顺时针动画为例：\n \n#### 1. 根据已知的 t（当前时间戳），求出此刻的 y （用时占比）\n \n![pie total](/data/post_imgs/饼图动效/pie-total.png)\n \n![pie detail](/data/post_imgs/饼图动效/pie-detail.png)\n \n比例 ： `y = (t-st) / (et - st);`\n \n#### 2. 根据每组数值大小，算出百分比（累加值）\n \n![百分比](/data/post_imgs/饼图动效/百分比.png)\n \n#### 3. 得到 index 值\n \n其实就是算此刻 y 在百分比数组中的排序 ； （往一个有序数组中插入未知值）\n \n \n#### （四）调整每组环形绘制的速度\n \n动画总时长已知，每个环形组动画用时均分情况下，要让每一组的动画衔接自然，则要计算出每组动画的速度。\n \n大环形跑的更快，小环形跑的较慢。（待优化：令其整体匀速运动，仅是单组用时不同）\n \n以 index == 2(第二组)为例：\n \n![确定各组动画速度](/data/post_imgs/饼图动效/确定各组动画速度.png)\n \n最后得出的 y2 ，才是补间动画真正传入的值。（若用 y 作为补间动画传入值的话，只是平均速度，这会使得每个环形组之间动画衔接不上）\n \n \n------------------------------------------------\n \n \n总结\n=========================\n写的有点绕。主要是自己对于一些数学概念没有很好地整理清晰，如：\n \ny 是根据时刻来算的。而数值百分比是根据实际数值大小来算的\n \n虽然得到的都是一个比率，但又好像不是同一个层面的东西。有种不知道咋“自圆其说”的尴尬...\n \n \nBUG\n=========================\n偶发性，最后的环没有闭合起来。这是由于 t 的精度太细，到了 et 时候，偶尔会跳漏了几帧。暂处理：给个offset值，即多画几帧。\n \n再谈 requestAnimationFrame\n=========================\n \n> 在页面重绘之前，通知浏览器调用一个指定的函数，以满足开发者操作动画的需求。这个方法接受一个函数为参，该函数会在重绘前调用；\n> DOMHighResTimeStamp参数，这个参数指示当前被 requestAnimationFrame 序列化的函数队列被触发的时间。单位毫秒，精确度在 10 µs。\n \n把 RAF 看成封装了的 setTimeout，但它做了两个其他事：\n \n1. !document.hidden\n2. 调用间隔为最合理、尽量小的值\n \n[MDN: window.requestAnimationFrame](https://developer.mozilla.org/zh-CN/docs/Web/API/window/requestAnimationFrame)","id":18}],"shaped_articles":[]}